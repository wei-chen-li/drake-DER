#include "drake/multibody/der/contact_energy.h"

#include <array>
#include <set>

#include "drake/math/matrix_util.h"

namespace drake {
namespace multibody {
namespace der {
namespace internal {

namespace {

template <typename T>
decltype(auto) ExtractDoubleOrThrow(const T& in) {
  return drake::ExtractDoubleOrThrow(in);
}
template <>
decltype(auto) ExtractDoubleOrThrow<AutoDiffXAutoDiffXd>(
    const AutoDiffXAutoDiffXd& in) {
  return in.value().value();
}

template <typename T>
void AddTo(Block4x4SparseSymmetricMatrix<T>* hessian,
           std::array<int, 4> node_indexes,
           const Eigen::Ref<const Eigen::Matrix<T, 12, 12>>& mat) {
  DRAKE_THROW_UNLESS(hessian != nullptr);
  DRAKE_ASSERT(math::IsSymmetric(mat, 1e-8));
  Eigen::Matrix4<T> block = Eigen::Matrix4<T>::Zero();
  for (int i = 0; i < 4; ++i) {
    for (int j = i; j < 4; ++j) {
      block.template topLeftCorner<3, 3>() =
          mat.template block<3, 3>(3 * i, 3 * j);
      const int block_i = node_indexes[i];
      const int block_j = node_indexes[j];
      if (block_i >= block_j)
        hessian->AddToBlock(block_i, block_j, block);
      else
        hessian->AddToBlock(block_j, block_i, block.transpose());
    }
  }
}

/* jacobian: (i0[12])->(o0[12]) */
void casadi_f0(const double** arg, double** res);

/* hessian: (i0[12])->(o0[12x12]) */
void casadi_f1(const double** arg, double** res);

}  // namespace

template <typename T>
ContactEnergy<T>::ContactEnergy(double C,
                                const DerUndeformedState<T>& undeformed)
    : energy_model_(C),
      has_closed_ends_(undeformed.has_closed_ends()),
      num_nodes_(undeformed.num_nodes()),
      filter_(has_closed_ends_,
              ExtractDoubleOrThrow(undeformed.get_edge_length()), C) {
  DRAKE_THROW_UNLESS(C > 0);
}

template <typename T>
ContactEnergy<T>::EnergyModel::EnergyModel(double C_in)
    : C(C_in), delta(0.01 * C), K(15 / delta) {
  DRAKE_THROW_UNLESS(C > 0);
  DRAKE_THROW_UNLESS(std::isfinite(C));
}

template <typename T>
T ContactEnergy<T>::EnergyModel::Ec(const T& D) const {
  DRAKE_ASSERT(ExtractDoubleOrThrow(D) >= 0);
  T val_sqrt(0.0);
  if (ExtractDoubleOrThrow(D) <= C - delta) {
    val_sqrt = C - D;
  } else if (ExtractDoubleOrThrow(D) < C + delta) {
    val_sqrt = 1 / K * log(1 + exp(K * (C - D)));
  }
  return val_sqrt * val_sqrt;
}

template <typename T>
T ContactEnergy<T>::EnergyModel::dEc_dD(const T& D) const {
  DRAKE_ASSERT(ExtractDoubleOrThrow(D) >= 0);
  T val(0.0);
  if (ExtractDoubleOrThrow(D) <= C - delta) {
    val = -2 * (C - D);
  } else if (ExtractDoubleOrThrow(D) < C + delta) {
    const T z = K * (C - D);
    const T sigmoid_z = 1 / (1 + exp(-z));
    val = -2 / K * log(1 + exp(z)) * sigmoid_z;
  }
  return val;
}

template <typename T>
T ContactEnergy<T>::EnergyModel::d2Ec_dD2(const T& D) const {
  DRAKE_ASSERT(ExtractDoubleOrThrow(D) >= 0);
  T val(0.0);
  if (ExtractDoubleOrThrow(D) <= C - delta) {
    val = 2.0;
  } else if (ExtractDoubleOrThrow(D) < C + delta) {
    const T z = K * (C - D);
    const T sigmoid_z = 1 / (1 + exp(-z));
    val = 2 * (sigmoid_z * sigmoid_z +
               log(1 + exp(z)) * sigmoid_z * (1 - sigmoid_z));
  }
  return val;
}

template <typename T>
const T& ContactEnergy<T>::ComputeEnergy(const DerState<T>& state) {
  Cache& cache = EvalCache(state);
  if (cache.energy) {
    return *cache.energy;
  }

  T energy(0.0);
  for (const auto& [i, j, D] : cache.contacts) {
    energy += energy_model_.Ec(D);
  }
  cache.energy = std::move(energy);
  return *cache.energy;
}

template <typename T>
template <typename T1>
std::enable_if_t<std::is_same_v<T1, double>, const Eigen::VectorX<T>&>
ContactEnergy<T>::ComputeEnergyJacobian(const DerState<T>& state) {
  Cache& cache = EvalCache(state);
  if (cache.jacobian) {
    DRAKE_DEMAND(cache.jacobian->size() == state.num_dofs());
    return *cache.jacobian;
  }

  const int num_nodes = state.num_dofs();
  Eigen::VectorX<T> jacobian = Eigen::VectorX<T>::Zero(state.num_dofs());
  for (const auto& [i, j, D] : cache.contacts) {
    const int ip1 = (i + 1) % num_nodes;
    const int jp1 = (j + 1) % num_nodes;

    const Eigen::Vector<T, 12> J =
        energy_model_.dEc_dD(D) *
        ComputeLineSegmentsDistanceJacobian<T>(
            cache.node_positions.col(i), cache.node_positions.col(ip1),
            cache.node_positions.col(j), cache.node_positions.col(jp1));

    jacobian.template segment<3>(4 * i) += J.template segment<3>(0);
    jacobian.template segment<3>(4 * ip1) += J.template segment<3>(3);
    jacobian.template segment<3>(4 * j) += J.template segment<3>(6);
    jacobian.template segment<3>(4 * jp1) += J.template segment<3>(9);
  }
  cache.jacobian = std::move(jacobian);
  return *cache.jacobian;
}

template <typename T>
template <typename T1>
std::enable_if_t<std::is_same_v<T1, double>,
                 const Block4x4SparseSymmetricMatrix<T>&>
ContactEnergy<T>::ComputeEnergyHessian(const DerState<T>& state) {
  Cache& cache = EvalCache(state);
  if (cache.hessian) {
    return *cache.hessian;
  }

  const int num_nodes = state.num_nodes();
  std::vector<int> block_sizes(num_nodes, 4);
  std::vector<std::set<int>> pattern(num_nodes);
  for (int i = 0; i < num_nodes; ++i) pattern[i].insert(i);
  for (const auto& [i, j, D] : cache.contacts) {
    std::array<int, 4> indexes = {i, (i + 1) % num_nodes,  //
                                  j, (j + 1) % num_nodes};
    for (int index1 : indexes) {
      for (int index2 : indexes) {
        pattern[index1].insert(index2);
      }
    }
  }
  std::vector<std::vector<int>> neighbors(num_nodes);
  for (int i = 0; i < num_nodes; ++i) {
    std::set<int>& row_pattern = pattern[i];
    neighbors[i].insert(neighbors[i].end(), row_pattern.lower_bound(i),
                        row_pattern.end());
  }
  contact_solvers::internal::BlockSparsityPattern block_sparsity_pattern(
      std::move(block_sizes), std::move(neighbors));

  Block4x4SparseSymmetricMatrix<T> hessian(std::move(block_sparsity_pattern));
  for (const auto& [i, j, D] : cache.contacts) {
    const int ip1 = (i + 1) % num_nodes;
    const int jp1 = (j + 1) % num_nodes;

    const auto node_i = cache.node_positions.col(i);
    const auto node_ip1 = cache.node_positions.col(ip1);
    const auto node_j = cache.node_positions.col(j);
    const auto node_jp1 = cache.node_positions.col(jp1);

    const Eigen::Vector<T, 12> J = ComputeLineSegmentsDistanceJacobian<T>(
        node_i, node_ip1, node_j, node_jp1);
    const Eigen::Matrix<T, 12, 12> H =
        energy_model_.d2Ec_dD2(D) * (J * J.transpose()) +
        energy_model_.dEc_dD(D) * ComputeLineSegmentsDistanceHessian<T>(
                                      node_i, node_ip1, node_j, node_jp1);
    AddTo<T>(&hessian, {i, ip1, j, jp1}, H);
  }
  cache.hessian = std::move(hessian);
  return *cache.hessian;
}

template <typename T>
typename ContactEnergy<T>::Cache& ContactEnergy<T>::EvalCache(
    const DerState<T>& state) {
  DRAKE_THROW_UNLESS(state.has_closed_ends() == has_closed_ends_);
  DRAKE_THROW_UNLESS(state.num_nodes() == num_nodes_);
  if (&state == std::get<0>(state_to_cache_) &&
      state.serial_number() == std::get<1>(state_to_cache_)) {
    Cache& cache = std::get<2>(state_to_cache_);
    DRAKE_DEMAND(cache.node_positions.cols() == state.num_nodes());
    return cache;
  }

  std::get<0>(state_to_cache_) = &state;
  std::get<1>(state_to_cache_) = state.serial_number();
  Cache& cache = std::get<2>(state_to_cache_);

  const int num_edges = state.num_edges();
  const int num_nodes = state.num_nodes();
  const VectorX<T>& q = state.get_position();
  cache.node_positions.resize(3, num_nodes);
  for (int i = 0; i < num_nodes; ++i) {
    cache.node_positions.col(i) = q.template segment<3>(4 * i);
  }

  cache.contacts.clear();
  // TODO(wei-chen): Use broad-phase search instead of brute force all pairs.
  for (int i = 0; i < num_edges; ++i) {
    for (int j = i + 1; j < num_edges; ++j) {
      if (!filter_.ShouldCollide(i, j)) continue;
      const int ip1 = (i + 1) % num_nodes;
      const int jp1 = (j + 1) % num_nodes;
      T D = ComputeDistanceBetweenLineSegments<T>(
          cache.node_positions.col(i), cache.node_positions.col(ip1),
          cache.node_positions.col(j), cache.node_positions.col(jp1));
      if (ExtractDoubleOrThrow(energy_model_.Ec(D)) != 0.0)
        cache.contacts.emplace_back(i, j, std::move(D));
    }
  }

  cache.energy = std::nullopt;
  cache.jacobian = std::nullopt;
  cache.hessian = std::nullopt;
  return cache;
}

/* This is the Lumelsky's algorithm.
 Lumelsky, V. J., 1985, “On Fast Computation of Distance Between Line
 Segments,” Information Processing Letters, 21(2), pp. 55–61. */
template <typename T>
T ComputeDistanceBetweenLineSegments(const Eigen::Ref<const Vector3<T>>& x1,
                                     const Eigen::Ref<const Vector3<T>>& x2,
                                     const Eigen::Ref<const Vector3<T>>& x3,
                                     const Eigen::Ref<const Vector3<T>>& x4) {
  /* e₁₂ = x₂ - x₁, e₃₄ = x₄ - x₃, e₁₃ = x₃ - x₁ */
  const Vector3<T> e12 = x2 - x1;
  const Vector3<T> e34 = x4 - x3;
  const Vector3<T> e13 = x3 - x1;
  /* D₁ u - R  v = S₁
     R  u - D₂ v = S₂ */
  const T D1 = e12.dot(e12);
  const T D2 = e34.dot(e34);
  const T R = e12.dot(e34);
  const T S1 = e12.dot(e13);
  const T S2 = e34.dot(e13);

  constexpr auto clamp = [](T* val) {
    if (ExtractDoubleOrThrow(*val) <= 0)
      *val = 0;
    else if (ExtractDoubleOrThrow(*val) >= 1)
      *val = 1;
  };

  const T denom = D1 * D2 - R * R;
  T u =
      (ExtractDoubleOrThrow(denom) != 0.0) ? (S1 * D2 - S2 * R) / denom : T(0);
  clamp(&u);
  T v = (R * u - S2) / D2;
  clamp(&v);
  u = (R * v + S1) / D1;
  clamp(&u);

  const T distance = (e12 * u - e34 * v - e13).norm();
  return distance;
}

template <typename T>
Eigen::Vector<T, 12> ComputeLineSegmentsDistanceJacobian(
    const Eigen::Ref<const Vector3<T>>& x1,
    const Eigen::Ref<const Vector3<T>>& x2,
    const Eigen::Ref<const Vector3<T>>& x3,
    const Eigen::Ref<const Vector3<T>>& x4) {
  Eigen::Vector<double, 12> xs;
  xs << x1, x2, x3, x4;
  Eigen::Vector<double, 12> jacobian = Eigen::Vector<double, 12>::Zero();
  const double* arg[1] = {xs.data()};
  double* res[1] = {jacobian.data()};
  casadi_f0(arg, res);
  return jacobian;
}

template <typename T>
Eigen::Matrix<T, 12, 12> ComputeLineSegmentsDistanceHessian(
    const Eigen::Ref<const Vector3<T>>& x1,
    const Eigen::Ref<const Vector3<T>>& x2,
    const Eigen::Ref<const Vector3<T>>& x3,
    const Eigen::Ref<const Vector3<T>>& x4) {
  Eigen::Vector<double, 12> xs;
  xs << x1, x2, x3, x4;
  Eigen::Matrix<double, 12, 12> hessian = Eigen::Matrix<double, 12, 12>::Zero();
  const double* arg[1] = {xs.data()};
  double* res[1] = {hessian.data()};
  casadi_f1(arg, res);
  return hessian;
}

DRAKE_DEFINE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_SCALARS(
    class ContactEnergy);
template const Eigen::VectorX<double>& ContactEnergy<
    double>::ComputeEnergyJacobian<double>(const DerState<double>& state);
template const Block4x4SparseSymmetricMatrix<double>& ContactEnergy<
    double>::ComputeEnergyHessian<double>(const DerState<double>& state);

DRAKE_DEFINE_FUNCTION_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_SCALARS(
    (&ComputeDistanceBetweenLineSegments<T>));
template AutoDiffXAutoDiffXd
ComputeDistanceBetweenLineSegments<AutoDiffXAutoDiffXd>(
    const Eigen::Ref<const Vector3<AutoDiffXAutoDiffXd>>& x1,
    const Eigen::Ref<const Vector3<AutoDiffXAutoDiffXd>>& x2,
    const Eigen::Ref<const Vector3<AutoDiffXAutoDiffXd>>& x3,
    const Eigen::Ref<const Vector3<AutoDiffXAutoDiffXd>>& x4);

template Eigen::Vector<double, 12> ComputeLineSegmentsDistanceJacobian<double>(
    const Eigen::Ref<const Eigen::Vector3d>&,
    const Eigen::Ref<const Eigen::Vector3d>&,
    const Eigen::Ref<const Eigen::Vector3d>&,
    const Eigen::Ref<const Eigen::Vector3d>&);

template Eigen::Matrix<double, 12, 12> ComputeLineSegmentsDistanceHessian<
    double>(const Eigen::Ref<const Eigen::Vector3d>&,
            const Eigen::Ref<const Eigen::Vector3d>&,
            const Eigen::Ref<const Eigen::Vector3d>&,
            const Eigen::Ref<const Eigen::Vector3d>&);

namespace {

/* The following C code is generated using the python script:
 ```
 import casadi as ca

 def compute_distance_between_line_segments(x1, x2, x3, x4):
     e12 = x2 - x1
     e34 = x4 - x3
     e13 = x3 - x1

     D1 = ca.dot(e12, e12)
     D2 = ca.dot(e34, e34)
     R = ca.dot(e12, e34)
     S1 = ca.dot(e12, e13)
     S2 = ca.dot(e34, e13)

     def clamp(val):
         return ca.fmin(ca.fmax(val, 0), 1)

     denom = D1 * D2 - R * R
     u = ca.if_else(denom == 0,
                    0,
                    (S1 * D2 - S2 * R) / denom)
     u = clamp(u)
     v = (R * u - S2) / D2
     v = clamp(v)
     u = (R * v + S1) / D1
     u = clamp(u)

     distance = ca.norm_2(e12 * u - e34 * v - e13)
     return distance


 X = ca.SX.sym('X', 12)
 x1 = X[0:3]
 x2 = X[3:6]
 x3 = X[6:9]
 x4 = X[9:12]

 dist = compute_distance_between_line_segments(x1, x2, x3, x4)

 jac = ca.gradient(dist, X)
 f_jac = ca.Function('jacobian', [X], [jac])

 hess, _ = ca.hessian(dist, X)
 f_hess = ca.Function('hessian', [X], [hess])

 f_jac.generate('jacobian_codegen')
 f_hess.generate('hessian_codegen')
 ```
 */
void casadi_f0(const double** arg, double** res) {
  double a00, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11;
  double a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23;
  double a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35;
  a00 = arg[0] ? arg[0][9] : 0;
  a01 = arg[0] ? arg[0][6] : 0;
  a00 = (a00 - a01);
  a02 = arg[0] ? arg[0][3] : 0;
  a03 = arg[0] ? arg[0][0] : 0;
  a02 = (a02 - a03);
  a04 = (a02 * a02);
  a05 = arg[0] ? arg[0][4] : 0;
  a06 = arg[0] ? arg[0][1] : 0;
  a05 = (a05 - a06);
  a07 = (a05 * a05);
  a04 = (a04 + a07);
  a07 = arg[0] ? arg[0][5] : 0;
  a08 = arg[0] ? arg[0][2] : 0;
  a07 = (a07 - a08);
  a09 = (a07 * a07);
  a04 = (a04 + a09);
  a09 = (a00 * a00);
  a10 = arg[0] ? arg[0][10] : 0;
  a11 = arg[0] ? arg[0][7] : 0;
  a10 = (a10 - a11);
  a12 = (a10 * a10);
  a09 = (a09 + a12);
  a12 = arg[0] ? arg[0][11] : 0;
  a13 = arg[0] ? arg[0][8] : 0;
  a12 = (a12 - a13);
  a14 = (a12 * a12);
  a09 = (a09 + a14);
  a14 = (a04 * a09);
  a15 = (a02 * a00);
  a16 = (a05 * a10);
  a15 = (a15 + a16);
  a16 = (a07 * a12);
  a15 = (a15 + a16);
  a16 = (a15 * a15);
  a14 = (a14 - a16);
  a16 = 0.;
  a17 = (a14 == a16);
  a17 = (!a17);
  a01 = (a01 - a03);
  a03 = (a02 * a01);
  a11 = (a11 - a06);
  a06 = (a05 * a11);
  a03 = (a03 + a06);
  a13 = (a13 - a08);
  a08 = (a07 * a13);
  a03 = (a03 + a08);
  a08 = (a03 * a09);
  a06 = (a00 * a01);
  a18 = (a10 * a11);
  a06 = (a06 + a18);
  a18 = (a12 * a13);
  a06 = (a06 + a18);
  a18 = (a06 * a15);
  a08 = (a08 - a18);
  a08 = (a08 / a14);
  a18 = (a17 ? a08 : 0);
  a19 = (a16 <= a18);
  a20 = (a18 <= a16);
  a20 = (a19 + a20);
  a19 = (a19 / a20);
  a18 = fmax(a18, a16);
  a20 = 1.;
  a21 = (a18 <= a20);
  a22 = (a20 <= a18);
  a22 = (a21 + a22);
  a21 = (a21 / a22);
  a18 = fmin(a18, a20);
  a22 = (a15 * a18);
  a22 = (a22 - a06);
  a22 = (a22 / a09);
  a23 = (a16 <= a22);
  a24 = (a22 <= a16);
  a24 = (a23 + a24);
  a23 = (a23 / a24);
  a24 = fmax(a22, a16);
  a25 = (a24 <= a20);
  a26 = (a20 <= a24);
  a26 = (a25 + a26);
  a25 = (a25 / a26);
  a24 = fmin(a24, a20);
  a26 = (a15 * a24);
  a26 = (a26 + a03);
  a26 = (a26 / a04);
  a27 = (a16 <= a26);
  a28 = (a26 <= a16);
  a28 = (a27 + a28);
  a27 = (a27 / a28);
  a16 = fmax(a26, a16);
  a28 = (a16 <= a20);
  a29 = (a20 <= a16);
  a29 = (a28 + a29);
  a28 = (a28 / a29);
  a16 = fmin(a16, a20);
  a20 = (a07 * a16);
  a29 = (a12 * a24);
  a20 = (a20 - a29);
  a20 = (a20 - a13);
  a29 = (a02 * a16);
  a30 = (a00 * a24);
  a29 = (a29 - a30);
  a29 = (a29 - a01);
  a30 = (a29 * a29);
  a31 = (a05 * a16);
  a32 = (a10 * a24);
  a31 = (a31 - a32);
  a31 = (a31 - a11);
  a32 = (a31 * a31);
  a30 = (a30 + a32);
  a32 = (a20 * a20);
  a30 = (a30 + a32);
  a30 = sqrt(a30);
  a20 = (a20 / a30);
  a32 = (a07 * a20);
  a31 = (a31 / a30);
  a33 = (a05 * a31);
  a32 = (a32 + a33);
  a29 = (a29 / a30);
  a30 = (a02 * a29);
  a32 = (a32 + a30);
  a28 = (a28 * a32);
  a27 = (a27 * a28);
  a28 = (a27 / a04);
  a32 = (a15 * a28);
  a30 = (a12 * a20);
  a33 = (a10 * a31);
  a30 = (a30 + a33);
  a33 = (a00 * a29);
  a30 = (a30 + a33);
  a32 = (a32 - a30);
  a25 = (a25 * a32);
  a23 = (a23 * a25);
  a25 = (a23 / a09);
  a32 = (a15 * a25);
  a21 = (a21 * a32);
  a19 = (a19 * a21);
  a21 = (a19 / a14);
  a32 = (a15 * a21);
  a32 = (-a32);
  a32 = (a17 ? a32 : 0);
  a32 = (a32 - a25);
  a30 = (a00 * a32);
  a30 = (a30 - a29);
  a33 = (a09 * a21);
  a33 = (a17 ? a33 : 0);
  a33 = (a28 + a33);
  a34 = (a02 * a33);
  a30 = (a30 + a34);
  a34 = (a16 * a29);
  a35 = (a01 * a33);
  a34 = (a34 + a35);
  a35 = (a02 + a02);
  a08 = (a08 / a14);
  a08 = (a08 * a19);
  a19 = (a09 * a08);
  a19 = (-a19);
  a19 = (a17 ? a19 : 0);
  a26 = (a26 / a04);
  a26 = (a26 * a27);
  a19 = (a19 - a26);
  a35 = (a35 * a19);
  a34 = (a34 + a35);
  a28 = (a24 * a28);
  a18 = (a18 * a25);
  a28 = (a28 + a18);
  a06 = (a06 * a21);
  a06 = (-a06);
  a06 = (a17 ? a06 : 0);
  a28 = (a28 + a06);
  a15 = (a15 + a15);
  a15 = (a15 * a08);
  a15 = (a17 ? a15 : 0);
  a28 = (a28 + a15);
  a15 = (a00 * a28);
  a34 = (a34 + a15);
  a15 = (a30 + a34);
  a15 = (-a15);
  if (res[0] != 0) res[0][0] = a15;
  a15 = (a10 * a32);
  a15 = (a15 - a31);
  a06 = (a05 * a33);
  a15 = (a15 + a06);
  a06 = (a16 * a31);
  a18 = (a11 * a33);
  a06 = (a06 + a18);
  a18 = (a05 + a05);
  a18 = (a18 * a19);
  a06 = (a06 + a18);
  a18 = (a10 * a28);
  a06 = (a06 + a18);
  a18 = (a15 + a06);
  a18 = (-a18);
  if (res[0] != 0) res[0][1] = a18;
  a18 = (a12 * a32);
  a18 = (a18 - a20);
  a25 = (a07 * a33);
  a18 = (a18 + a25);
  a16 = (a16 * a20);
  a33 = (a13 * a33);
  a16 = (a16 + a33);
  a33 = (a07 + a07);
  a33 = (a33 * a19);
  a16 = (a16 + a33);
  a33 = (a12 * a28);
  a16 = (a16 + a33);
  a33 = (a18 + a16);
  a33 = (-a33);
  if (res[0] != 0) res[0][2] = a33;
  if (res[0] != 0) res[0][3] = a34;
  if (res[0] != 0) res[0][4] = a06;
  if (res[0] != 0) res[0][5] = a16;
  a01 = (a01 * a32);
  a29 = (a24 * a29);
  a01 = (a01 - a29);
  a00 = (a00 + a00);
  a03 = (a03 * a21);
  a03 = (a17 ? a03 : 0);
  a22 = (a22 / a09);
  a22 = (a22 * a23);
  a03 = (a03 - a22);
  a04 = (a04 * a08);
  a04 = (-a04);
  a17 = (a17 ? a04 : 0);
  a03 = (a03 + a17);
  a00 = (a00 * a03);
  a01 = (a01 + a00);
  a02 = (a02 * a28);
  a01 = (a01 + a02);
  a30 = (a30 - a01);
  if (res[0] != 0) res[0][6] = a30;
  a11 = (a11 * a32);
  a31 = (a24 * a31);
  a11 = (a11 - a31);
  a10 = (a10 + a10);
  a10 = (a10 * a03);
  a11 = (a11 + a10);
  a05 = (a05 * a28);
  a11 = (a11 + a05);
  a15 = (a15 - a11);
  if (res[0] != 0) res[0][7] = a15;
  a13 = (a13 * a32);
  a24 = (a24 * a20);
  a13 = (a13 - a24);
  a12 = (a12 + a12);
  a12 = (a12 * a03);
  a13 = (a13 + a12);
  a07 = (a07 * a28);
  a13 = (a13 + a07);
  a18 = (a18 - a13);
  if (res[0] != 0) res[0][8] = a18;
  if (res[0] != 0) res[0][9] = a01;
  if (res[0] != 0) res[0][10] = a11;
  if (res[0] != 0) res[0][11] = a13;
}  // NOLINT(readability/fn_size)

void casadi_f1(const double** arg, double** res) {
  double a000, a001, a002, a003, a004, a005, a006, a007, a008, a009, a010, a011;
  double a012, a013, a014, a015, a016, a017, a018, a019, a020, a021, a022, a023;
  double a024, a025, a026, a027, a028, a029, a030, a031, a032, a033, a034, a035;
  double a036, a037, a038, a039, a040, a041, a042, a043, a044, a045, a046, a047;
  double a048, a049, a050, a051, a052, a053, a054, a055, a056, a057, a058, a059;
  double a060, a061, a062, a063, a064, a065, a066, a067, a068, a069, a070, a071;
  double a072, a073, a074, a075, a076, a077, a078, a079, a080, a081, a082, a083;
  double a084, a085, a086, a087, a088, a089, a090, a091, a092, a093, a094, a095;
  double a096, a097, a098, a099, a100, a101, a102, a103, a104, a105, a106, a107;
  double a108, a109, a110, a111, a112, a113, a114, a115, a116, a117, a118, a119;
  double a120, a121, a122, a123, a124, a125, a126, a127, a128, a129, a130, a131;
  double a132, a133, a134, a135, a136, a137, a138, a139, a140, a141, a142, a143;
  double a144, a145, a146, a147, a148, a149, a150, a151, a152, a153, a154, a155;
  double a156, a157, a158, a159, a160, a161, a162, a163, a164, a165, a166, a167;
  double a168, a169, a170, a171, a172, a173, a174, a175, a176, a177, a178, a179;
  double a180, a181, a182, a183, a184, a185, a186, a187, a188, a189, a190, a191;
  double a192, a193, a194, a195, a196, a197, a198;
  a000 = arg[0] ? arg[0][9] : 0;
  a001 = arg[0] ? arg[0][6] : 0;
  a000 = (a000 - a001);
  a002 = arg[0] ? arg[0][3] : 0;
  a003 = arg[0] ? arg[0][0] : 0;
  a002 = (a002 - a003);
  a004 = (a002 * a002);
  a005 = arg[0] ? arg[0][4] : 0;
  a006 = arg[0] ? arg[0][1] : 0;
  a005 = (a005 - a006);
  a007 = (a005 * a005);
  a004 = (a004 + a007);
  a007 = arg[0] ? arg[0][5] : 0;
  a008 = arg[0] ? arg[0][2] : 0;
  a007 = (a007 - a008);
  a009 = (a007 * a007);
  a004 = (a004 + a009);
  a009 = (a000 * a000);
  a010 = arg[0] ? arg[0][10] : 0;
  a011 = arg[0] ? arg[0][7] : 0;
  a010 = (a010 - a011);
  a012 = (a010 * a010);
  a009 = (a009 + a012);
  a012 = arg[0] ? arg[0][11] : 0;
  a013 = arg[0] ? arg[0][8] : 0;
  a012 = (a012 - a013);
  a014 = (a012 * a012);
  a009 = (a009 + a014);
  a014 = (a004 * a009);
  a015 = (a002 * a000);
  a016 = (a005 * a010);
  a015 = (a015 + a016);
  a016 = (a007 * a012);
  a015 = (a015 + a016);
  a016 = (a015 * a015);
  a014 = (a014 - a016);
  a016 = 0.;
  a017 = (a014 == a016);
  a017 = (!a017);
  a001 = (a001 - a003);
  a003 = (a002 * a001);
  a011 = (a011 - a006);
  a006 = (a005 * a011);
  a003 = (a003 + a006);
  a013 = (a013 - a008);
  a008 = (a007 * a013);
  a003 = (a003 + a008);
  a008 = (a003 * a009);
  a006 = (a000 * a001);
  a018 = (a010 * a011);
  a006 = (a006 + a018);
  a018 = (a012 * a013);
  a006 = (a006 + a018);
  a018 = (a006 * a015);
  a008 = (a008 - a018);
  a008 = (a008 / a014);
  a018 = (a017 ? a008 : 0);
  a019 = (a016 <= a018);
  a020 = (a018 <= a016);
  a020 = (a019 + a020);
  a019 = (a019 / a020);
  a020 = fmax(a018, a016);
  a021 = 1.;
  a022 = (a020 <= a021);
  a023 = (a021 <= a020);
  a023 = (a022 + a023);
  a022 = (a022 / a023);
  a023 = fmin(a020, a021);
  a024 = (a015 * a023);
  a024 = (a024 - a006);
  a024 = (a024 / a009);
  a025 = (a016 <= a024);
  a026 = (a024 <= a016);
  a026 = (a025 + a026);
  a025 = (a025 / a026);
  a026 = fmax(a024, a016);
  a027 = (a026 <= a021);
  a028 = (a021 <= a026);
  a028 = (a027 + a028);
  a027 = (a027 / a028);
  a028 = fmin(a026, a021);
  a029 = (a015 * a028);
  a029 = (a029 + a003);
  a029 = (a029 / a004);
  a030 = (a016 <= a029);
  a031 = (a029 <= a016);
  a031 = (a030 + a031);
  a030 = (a030 / a031);
  a031 = fmax(a029, a016);
  a032 = (a031 <= a021);
  a033 = (a021 <= a031);
  a033 = (a032 + a033);
  a032 = (a032 / a033);
  a033 = (a031 <= a021);
  a034 = (a021 <= a031);
  a034 = (a033 + a034);
  a033 = (a033 / a034);
  a034 = (a016 <= a029);
  a035 = (a029 <= a016);
  a035 = (a034 + a035);
  a034 = (a034 / a035);
  a035 = (a026 <= a021);
  a026 = (a021 <= a026);
  a026 = (a035 + a026);
  a035 = (a035 / a026);
  a026 = (a016 <= a024);
  a036 = (a024 <= a016);
  a036 = (a026 + a036);
  a026 = (a026 / a036);
  a036 = (a020 <= a021);
  a020 = (a021 <= a020);
  a020 = (a036 + a020);
  a036 = (a036 / a020);
  a020 = (a016 <= a018);
  a018 = (a018 <= a016);
  a018 = (a020 + a018);
  a020 = (a020 / a018);
  a018 = (a015 * a000);
  a016 = (a006 * a000);
  a018 = (a018 + a016);
  a016 = (a001 + a002);
  a037 = (a009 * a016);
  a018 = (a018 - a037);
  a018 = (a018 / a014);
  a037 = (a008 / a014);
  a038 = (a015 + a015);
  a039 = (a038 * a000);
  a040 = (a002 + a002);
  a041 = (a009 * a040);
  a039 = (a039 - a041);
  a041 = (a037 * a039);
  a018 = (a018 - a041);
  a041 = (a020 * a018);
  a041 = (a036 * a041);
  a042 = (a015 * a041);
  a042 = (a017 ? a042 : 0);
  a043 = (a023 * a000);
  a042 = (a042 - a043);
  a042 = (a042 + a000);
  a042 = (a042 / a009);
  a042 = (a026 * a042);
  a042 = (a035 * a042);
  a043 = (a015 * a042);
  a044 = (a028 * a000);
  a043 = (a043 - a044);
  a043 = (a043 - a016);
  a043 = (a043 / a004);
  a016 = (a029 / a004);
  a044 = (a016 * a040);
  a043 = (a043 + a044);
  a044 = (a034 * a043);
  a044 = (a033 * a044);
  a045 = (a007 * a044);
  a046 = (a012 * a042);
  a045 = (a045 - a046);
  a031 = fmin(a031, a021);
  a046 = (a002 * a031);
  a047 = (a000 * a028);
  a046 = (a046 - a047);
  a046 = (a046 - a001);
  a047 = (a046 * a046);
  a048 = (a005 * a031);
  a049 = (a010 * a028);
  a048 = (a048 - a049);
  a048 = (a048 - a011);
  a049 = (a048 * a048);
  a047 = (a047 + a049);
  a049 = (a007 * a031);
  a050 = (a012 * a028);
  a049 = (a049 - a050);
  a049 = (a049 - a013);
  a050 = (a049 * a049);
  a047 = (a047 + a050);
  a047 = sqrt(a047);
  a050 = (a045 / a047);
  a051 = (a049 / a047);
  a052 = (a051 / a047);
  a053 = (a046 + a046);
  a054 = (a002 * a044);
  a054 = (a054 - a031);
  a055 = (a000 * a042);
  a054 = (a054 - a055);
  a054 = (a054 + a021);
  a055 = (a053 * a054);
  a056 = (a048 + a048);
  a057 = (a005 * a044);
  a058 = (a010 * a042);
  a057 = (a057 - a058);
  a058 = (a056 * a057);
  a055 = (a055 + a058);
  a049 = (a049 + a049);
  a045 = (a049 * a045);
  a055 = (a055 + a045);
  a045 = (a047 + a047);
  a055 = (a055 / a045);
  a058 = (a052 * a055);
  a050 = (a050 - a058);
  a058 = (a007 * a050);
  a057 = (a057 / a047);
  a048 = (a048 / a047);
  a059 = (a048 / a047);
  a060 = (a059 * a055);
  a057 = (a057 - a060);
  a060 = (a005 * a057);
  a058 = (a058 + a060);
  a054 = (a054 / a047);
  a046 = (a046 / a047);
  a060 = (a046 / a047);
  a055 = (a060 * a055);
  a054 = (a054 - a055);
  a055 = (a002 * a054);
  a055 = (a055 - a046);
  a058 = (a058 + a055);
  a058 = (a032 * a058);
  a058 = (a030 * a058);
  a055 = (a058 / a004);
  a061 = (a007 * a051);
  a062 = (a005 * a048);
  a061 = (a061 + a062);
  a062 = (a002 * a046);
  a061 = (a061 + a062);
  a061 = (a032 * a061);
  a061 = (a030 * a061);
  a062 = (a061 / a004);
  a063 = (a062 / a004);
  a064 = (a063 * a040);
  a055 = (a055 + a064);
  a064 = (a015 * a055);
  a065 = (a062 * a000);
  a064 = (a064 - a065);
  a050 = (a012 * a050);
  a057 = (a010 * a057);
  a050 = (a050 + a057);
  a057 = (a000 * a054);
  a050 = (a050 + a057);
  a064 = (a064 - a050);
  a064 = (a027 * a064);
  a064 = (a025 * a064);
  a064 = (a064 / a009);
  a050 = (a015 * a064);
  a057 = (a015 * a062);
  a065 = (a012 * a051);
  a066 = (a010 * a048);
  a065 = (a065 + a066);
  a066 = (a000 * a046);
  a065 = (a065 + a066);
  a057 = (a057 - a065);
  a057 = (a027 * a057);
  a057 = (a025 * a057);
  a065 = (a057 / a009);
  a066 = (a065 * a000);
  a050 = (a050 - a066);
  a050 = (a022 * a050);
  a050 = (a019 * a050);
  a066 = (a050 / a014);
  a067 = (a015 * a065);
  a067 = (a022 * a067);
  a067 = (a019 * a067);
  a068 = (a067 / a014);
  a069 = (a068 / a014);
  a070 = (a069 * a039);
  a066 = (a066 - a070);
  a070 = (a015 * a066);
  a071 = (a068 * a000);
  a070 = (a070 - a071);
  a070 = (-a070);
  a070 = (a017 ? a070 : 0);
  a070 = (a070 - a064);
  a070 = (a000 * a070);
  a070 = (a070 - a054);
  a071 = (a009 * a066);
  a071 = (a017 ? a071 : 0);
  a071 = (a055 + a071);
  a072 = (a002 * a071);
  a073 = (a009 * a068);
  a073 = (a017 ? a073 : 0);
  a073 = (a062 + a073);
  a072 = (a072 - a073);
  a070 = (a070 + a072);
  a044 = (a046 * a044);
  a054 = (a031 * a054);
  a044 = (a044 + a054);
  a071 = (a001 * a071);
  a071 = (a071 - a073);
  a044 = (a044 + a071);
  a071 = -2.;
  a008 = (a008 / a014);
  a054 = (a008 * a067);
  a072 = (a009 * a054);
  a072 = (-a072);
  a072 = (a017 ? a072 : 0);
  a029 = (a029 / a004);
  a074 = (a029 * a061);
  a072 = (a072 - a074);
  a074 = (a071 * a072);
  a075 = (a002 + a002);
  a018 = (a018 / a014);
  a076 = (a008 / a014);
  a039 = (a076 * a039);
  a018 = (a018 - a039);
  a018 = (a067 * a018);
  a050 = (a008 * a050);
  a018 = (a018 + a050);
  a050 = (a009 * a018);
  a050 = (-a050);
  a050 = (a017 ? a050 : 0);
  a043 = (a043 / a004);
  a039 = (a029 / a004);
  a077 = (a039 * a040);
  a043 = (a043 + a077);
  a043 = (a061 * a043);
  a058 = (a029 * a058);
  a043 = (a043 + a058);
  a050 = (a050 - a043);
  a050 = (a075 * a050);
  a074 = (a074 + a050);
  a044 = (a044 + a074);
  a042 = (a062 * a042);
  a055 = (a028 * a055);
  a042 = (a042 + a055);
  a041 = (a065 * a041);
  a041 = (a017 ? a041 : 0);
  a064 = (a023 * a064);
  a041 = (a041 + a064);
  a042 = (a042 + a041);
  a066 = (a006 * a066);
  a041 = (a068 * a000);
  a066 = (a066 - a041);
  a066 = (-a066);
  a066 = (a017 ? a066 : 0);
  a042 = (a042 + a066);
  a066 = (a015 + a015);
  a018 = (a066 * a018);
  a041 = (a000 + a000);
  a041 = (a054 * a041);
  a018 = (a018 - a041);
  a018 = (a017 ? a018 : 0);
  a042 = (a042 + a018);
  a042 = (a000 * a042);
  a044 = (a044 + a042);
  a070 = (a070 + a044);
  a070 = (-a070);
  if (res[0] != 0) res[0][0] = a070;
  a070 = (a015 * a010);
  a044 = (a006 * a010);
  a070 = (a070 + a044);
  a044 = (a011 + a005);
  a042 = (a009 * a044);
  a070 = (a070 - a042);
  a070 = (a070 / a014);
  a042 = (a038 * a010);
  a018 = (a005 + a005);
  a041 = (a009 * a018);
  a042 = (a042 - a041);
  a041 = (a037 * a042);
  a070 = (a070 - a041);
  a041 = (a020 * a070);
  a041 = (a036 * a041);
  a064 = (a015 * a041);
  a064 = (a017 ? a064 : 0);
  a055 = (a023 * a010);
  a064 = (a064 - a055);
  a064 = (a064 + a010);
  a064 = (a064 / a009);
  a064 = (a026 * a064);
  a064 = (a035 * a064);
  a055 = (a015 * a064);
  a074 = (a028 * a010);
  a055 = (a055 - a074);
  a055 = (a055 - a044);
  a055 = (a055 / a004);
  a044 = (a016 * a018);
  a055 = (a055 + a044);
  a044 = (a034 * a055);
  a044 = (a033 * a044);
  a074 = (a007 * a044);
  a050 = (a012 * a064);
  a074 = (a074 - a050);
  a050 = (a074 / a047);
  a043 = (a002 * a044);
  a058 = (a000 * a064);
  a043 = (a043 - a058);
  a058 = (a053 * a043);
  a077 = (a005 * a044);
  a077 = (a077 - a031);
  a078 = (a010 * a064);
  a077 = (a077 - a078);
  a077 = (a077 + a021);
  a078 = (a056 * a077);
  a058 = (a058 + a078);
  a074 = (a049 * a074);
  a058 = (a058 + a074);
  a058 = (a058 / a045);
  a074 = (a052 * a058);
  a050 = (a050 - a074);
  a074 = (a007 * a050);
  a077 = (a077 / a047);
  a078 = (a059 * a058);
  a077 = (a077 - a078);
  a078 = (a005 * a077);
  a078 = (a078 - a048);
  a074 = (a074 + a078);
  a043 = (a043 / a047);
  a058 = (a060 * a058);
  a043 = (a043 - a058);
  a058 = (a002 * a043);
  a074 = (a074 + a058);
  a074 = (a032 * a074);
  a074 = (a030 * a074);
  a058 = (a074 / a004);
  a078 = (a063 * a018);
  a058 = (a058 + a078);
  a078 = (a015 * a058);
  a079 = (a062 * a010);
  a078 = (a078 - a079);
  a050 = (a012 * a050);
  a079 = (a010 * a077);
  a050 = (a050 + a079);
  a079 = (a000 * a043);
  a050 = (a050 + a079);
  a078 = (a078 - a050);
  a078 = (a027 * a078);
  a078 = (a025 * a078);
  a078 = (a078 / a009);
  a050 = (a015 * a078);
  a079 = (a065 * a010);
  a050 = (a050 - a079);
  a050 = (a022 * a050);
  a050 = (a019 * a050);
  a079 = (a050 / a014);
  a080 = (a069 * a042);
  a079 = (a079 - a080);
  a080 = (a015 * a079);
  a081 = (a068 * a010);
  a080 = (a080 - a081);
  a080 = (-a080);
  a080 = (a017 ? a080 : 0);
  a080 = (a080 - a078);
  a081 = (a000 * a080);
  a081 = (a081 - a043);
  a082 = (a009 * a079);
  a082 = (a017 ? a082 : 0);
  a082 = (a058 + a082);
  a083 = (a002 * a082);
  a081 = (a081 + a083);
  a083 = (a046 * a044);
  a043 = (a031 * a043);
  a083 = (a083 + a043);
  a043 = (a001 * a082);
  a083 = (a083 + a043);
  a070 = (a070 / a014);
  a042 = (a076 * a042);
  a070 = (a070 - a042);
  a070 = (a067 * a070);
  a050 = (a008 * a050);
  a070 = (a070 + a050);
  a050 = (a009 * a070);
  a050 = (-a050);
  a050 = (a017 ? a050 : 0);
  a055 = (a055 / a004);
  a042 = (a039 * a018);
  a055 = (a055 + a042);
  a055 = (a061 * a055);
  a074 = (a029 * a074);
  a055 = (a055 + a074);
  a050 = (a050 - a055);
  a055 = (a075 * a050);
  a083 = (a083 + a055);
  a064 = (a062 * a064);
  a058 = (a028 * a058);
  a064 = (a064 + a058);
  a041 = (a065 * a041);
  a041 = (a017 ? a041 : 0);
  a078 = (a023 * a078);
  a041 = (a041 + a078);
  a064 = (a064 + a041);
  a079 = (a006 * a079);
  a041 = (a068 * a010);
  a079 = (a079 - a041);
  a079 = (-a079);
  a079 = (a017 ? a079 : 0);
  a064 = (a064 + a079);
  a070 = (a066 * a070);
  a079 = (a010 + a010);
  a079 = (a054 * a079);
  a070 = (a070 - a079);
  a070 = (a017 ? a070 : 0);
  a064 = (a064 + a070);
  a070 = (a000 * a064);
  a083 = (a083 + a070);
  a081 = (a081 + a083);
  a081 = (-a081);
  if (res[0] != 0) res[0][1] = a081;
  a083 = (a015 * a012);
  a070 = (a006 * a012);
  a083 = (a083 + a070);
  a070 = (a013 + a007);
  a079 = (a009 * a070);
  a083 = (a083 - a079);
  a083 = (a083 / a014);
  a079 = (a038 * a012);
  a041 = (a007 + a007);
  a078 = (a009 * a041);
  a079 = (a079 - a078);
  a078 = (a037 * a079);
  a083 = (a083 - a078);
  a078 = (a020 * a083);
  a078 = (a036 * a078);
  a058 = (a015 * a078);
  a058 = (a017 ? a058 : 0);
  a055 = (a023 * a012);
  a058 = (a058 - a055);
  a058 = (a058 + a012);
  a058 = (a058 / a009);
  a058 = (a026 * a058);
  a058 = (a035 * a058);
  a055 = (a015 * a058);
  a074 = (a028 * a012);
  a055 = (a055 - a074);
  a055 = (a055 - a070);
  a055 = (a055 / a004);
  a070 = (a016 * a041);
  a055 = (a055 + a070);
  a070 = (a034 * a055);
  a070 = (a033 * a070);
  a074 = (a007 * a070);
  a074 = (a074 - a031);
  a042 = (a012 * a058);
  a074 = (a074 - a042);
  a074 = (a074 + a021);
  a021 = (a074 / a047);
  a042 = (a002 * a070);
  a043 = (a000 * a058);
  a042 = (a042 - a043);
  a043 = (a053 * a042);
  a084 = (a005 * a070);
  a085 = (a010 * a058);
  a084 = (a084 - a085);
  a085 = (a056 * a084);
  a043 = (a043 + a085);
  a074 = (a049 * a074);
  a043 = (a043 + a074);
  a043 = (a043 / a045);
  a074 = (a052 * a043);
  a021 = (a021 - a074);
  a074 = (a007 * a021);
  a074 = (a074 - a051);
  a084 = (a084 / a047);
  a085 = (a059 * a043);
  a084 = (a084 - a085);
  a085 = (a005 * a084);
  a074 = (a074 + a085);
  a042 = (a042 / a047);
  a043 = (a060 * a043);
  a042 = (a042 - a043);
  a043 = (a002 * a042);
  a074 = (a074 + a043);
  a074 = (a032 * a074);
  a074 = (a030 * a074);
  a043 = (a074 / a004);
  a085 = (a063 * a041);
  a043 = (a043 + a085);
  a085 = (a015 * a043);
  a086 = (a062 * a012);
  a085 = (a085 - a086);
  a086 = (a012 * a021);
  a087 = (a010 * a084);
  a086 = (a086 + a087);
  a087 = (a000 * a042);
  a086 = (a086 + a087);
  a085 = (a085 - a086);
  a085 = (a027 * a085);
  a085 = (a025 * a085);
  a085 = (a085 / a009);
  a086 = (a015 * a085);
  a087 = (a065 * a012);
  a086 = (a086 - a087);
  a086 = (a022 * a086);
  a086 = (a019 * a086);
  a087 = (a086 / a014);
  a088 = (a069 * a079);
  a087 = (a087 - a088);
  a088 = (a015 * a087);
  a089 = (a068 * a012);
  a088 = (a088 - a089);
  a088 = (-a088);
  a088 = (a017 ? a088 : 0);
  a088 = (a088 - a085);
  a089 = (a000 * a088);
  a089 = (a089 - a042);
  a090 = (a009 * a087);
  a090 = (a017 ? a090 : 0);
  a090 = (a043 + a090);
  a091 = (a002 * a090);
  a089 = (a089 + a091);
  a091 = (a046 * a070);
  a042 = (a031 * a042);
  a091 = (a091 + a042);
  a042 = (a001 * a090);
  a091 = (a091 + a042);
  a083 = (a083 / a014);
  a079 = (a076 * a079);
  a083 = (a083 - a079);
  a083 = (a067 * a083);
  a086 = (a008 * a086);
  a083 = (a083 + a086);
  a086 = (a009 * a083);
  a086 = (-a086);
  a086 = (a017 ? a086 : 0);
  a055 = (a055 / a004);
  a079 = (a039 * a041);
  a055 = (a055 + a079);
  a055 = (a061 * a055);
  a074 = (a029 * a074);
  a055 = (a055 + a074);
  a086 = (a086 - a055);
  a055 = (a075 * a086);
  a091 = (a091 + a055);
  a058 = (a062 * a058);
  a043 = (a028 * a043);
  a058 = (a058 + a043);
  a078 = (a065 * a078);
  a078 = (a017 ? a078 : 0);
  a085 = (a023 * a085);
  a078 = (a078 + a085);
  a058 = (a058 + a078);
  a087 = (a006 * a087);
  a078 = (a068 * a012);
  a087 = (a087 - a078);
  a087 = (-a087);
  a087 = (a017 ? a087 : 0);
  a058 = (a058 + a087);
  a083 = (a066 * a083);
  a087 = (a012 + a012);
  a087 = (a054 * a087);
  a083 = (a083 - a087);
  a083 = (a017 ? a083 : 0);
  a058 = (a058 + a083);
  a083 = (a000 * a058);
  a091 = (a091 + a083);
  a089 = (a089 + a091);
  a089 = (-a089);
  if (res[0] != 0) res[0][2] = a089;
  a091 = (a068 * a000);
  a083 = (a065 * a000);
  a087 = (a062 * a000);
  a078 = (a028 * a000);
  a085 = (a023 * a000);
  a043 = (a009 * a001);
  a055 = (a006 * a000);
  a043 = (a043 - a055);
  a043 = (a043 / a014);
  a055 = (a009 * a040);
  a074 = (a038 * a000);
  a055 = (a055 - a074);
  a074 = (a037 * a055);
  a043 = (a043 - a074);
  a074 = (a020 * a043);
  a074 = (a036 * a074);
  a079 = (a015 * a074);
  a079 = (a017 ? a079 : 0);
  a085 = (a085 + a079);
  a085 = (a085 / a009);
  a085 = (a026 * a085);
  a085 = (a035 * a085);
  a079 = (a015 * a085);
  a078 = (a078 + a079);
  a078 = (a078 + a001);
  a078 = (a078 / a004);
  a079 = (a016 * a040);
  a078 = (a078 - a079);
  a079 = (a034 * a078);
  a079 = (a033 * a079);
  a042 = (a007 * a079);
  a092 = (a012 * a085);
  a042 = (a042 - a092);
  a092 = (a042 / a047);
  a093 = (a002 * a079);
  a093 = (a031 + a093);
  a094 = (a000 * a085);
  a093 = (a093 - a094);
  a094 = (a053 * a093);
  a095 = (a005 * a079);
  a096 = (a010 * a085);
  a095 = (a095 - a096);
  a096 = (a056 * a095);
  a094 = (a094 + a096);
  a042 = (a049 * a042);
  a094 = (a094 + a042);
  a094 = (a094 / a045);
  a042 = (a052 * a094);
  a092 = (a092 - a042);
  a042 = (a007 * a092);
  a095 = (a095 / a047);
  a096 = (a059 * a094);
  a095 = (a095 - a096);
  a096 = (a005 * a095);
  a042 = (a042 + a096);
  a093 = (a093 / a047);
  a094 = (a060 * a094);
  a093 = (a093 - a094);
  a094 = (a002 * a093);
  a094 = (a046 + a094);
  a042 = (a042 + a094);
  a042 = (a032 * a042);
  a042 = (a030 * a042);
  a094 = (a042 / a004);
  a096 = (a063 * a040);
  a094 = (a094 - a096);
  a096 = (a015 * a094);
  a087 = (a087 + a096);
  a096 = (a012 * a092);
  a097 = (a010 * a095);
  a096 = (a096 + a097);
  a097 = (a000 * a093);
  a096 = (a096 + a097);
  a087 = (a087 - a096);
  a087 = (a027 * a087);
  a087 = (a025 * a087);
  a087 = (a087 / a009);
  a096 = (a015 * a087);
  a083 = (a083 + a096);
  a083 = (a022 * a083);
  a083 = (a019 * a083);
  a096 = (a083 / a014);
  a097 = (a069 * a055);
  a096 = (a096 - a097);
  a097 = (a015 * a096);
  a091 = (a091 + a097);
  a091 = (-a091);
  a091 = (a017 ? a091 : 0);
  a091 = (a091 - a087);
  a097 = (a000 * a091);
  a097 = (a097 - a093);
  a098 = (a009 * a096);
  a098 = (a017 ? a098 : 0);
  a098 = (a094 + a098);
  a099 = (a002 * a098);
  a099 = (a073 + a099);
  a097 = (a097 + a099);
  a099 = (a046 * a079);
  a093 = (a031 * a093);
  a099 = (a099 + a093);
  a093 = (a001 * a098);
  a099 = (a099 + a093);
  a093 = 2.;
  a100 = (a093 * a072);
  a043 = (a043 / a014);
  a055 = (a076 * a055);
  a043 = (a043 - a055);
  a043 = (a067 * a043);
  a083 = (a008 * a083);
  a043 = (a043 + a083);
  a083 = (a009 * a043);
  a083 = (-a083);
  a083 = (a017 ? a083 : 0);
  a078 = (a078 / a004);
  a040 = (a039 * a040);
  a078 = (a078 - a040);
  a078 = (a061 * a078);
  a042 = (a029 * a042);
  a078 = (a078 + a042);
  a083 = (a083 - a078);
  a078 = (a075 * a083);
  a100 = (a100 + a078);
  a099 = (a099 + a100);
  a085 = (a062 * a085);
  a094 = (a028 * a094);
  a085 = (a085 + a094);
  a074 = (a065 * a074);
  a074 = (a017 ? a074 : 0);
  a087 = (a023 * a087);
  a074 = (a074 + a087);
  a085 = (a085 + a074);
  a096 = (a006 * a096);
  a096 = (-a096);
  a096 = (a017 ? a096 : 0);
  a085 = (a085 + a096);
  a096 = (a000 + a000);
  a096 = (a054 * a096);
  a043 = (a066 * a043);
  a096 = (a096 + a043);
  a096 = (a017 ? a096 : 0);
  a085 = (a085 + a096);
  a096 = (a000 * a085);
  a099 = (a099 + a096);
  a097 = (a097 + a099);
  a097 = (-a097);
  if (res[0] != 0) res[0][3] = a097;
  a096 = (a068 * a010);
  a043 = (a065 * a010);
  a074 = (a062 * a010);
  a087 = (a028 * a010);
  a094 = (a023 * a010);
  a100 = (a009 * a011);
  a078 = (a006 * a010);
  a100 = (a100 - a078);
  a100 = (a100 / a014);
  a078 = (a009 * a018);
  a042 = (a038 * a010);
  a078 = (a078 - a042);
  a042 = (a037 * a078);
  a100 = (a100 - a042);
  a042 = (a020 * a100);
  a042 = (a036 * a042);
  a040 = (a015 * a042);
  a040 = (a017 ? a040 : 0);
  a094 = (a094 + a040);
  a094 = (a094 / a009);
  a094 = (a026 * a094);
  a094 = (a035 * a094);
  a040 = (a015 * a094);
  a087 = (a087 + a040);
  a087 = (a087 + a011);
  a087 = (a087 / a004);
  a040 = (a016 * a018);
  a087 = (a087 - a040);
  a040 = (a034 * a087);
  a040 = (a033 * a040);
  a055 = (a007 * a040);
  a101 = (a012 * a094);
  a055 = (a055 - a101);
  a101 = (a055 / a047);
  a102 = (a002 * a040);
  a103 = (a000 * a094);
  a102 = (a102 - a103);
  a103 = (a053 * a102);
  a104 = (a005 * a040);
  a104 = (a031 + a104);
  a105 = (a010 * a094);
  a104 = (a104 - a105);
  a105 = (a056 * a104);
  a103 = (a103 + a105);
  a055 = (a049 * a055);
  a103 = (a103 + a055);
  a103 = (a103 / a045);
  a055 = (a052 * a103);
  a101 = (a101 - a055);
  a055 = (a007 * a101);
  a104 = (a104 / a047);
  a105 = (a059 * a103);
  a104 = (a104 - a105);
  a105 = (a005 * a104);
  a105 = (a048 + a105);
  a055 = (a055 + a105);
  a102 = (a102 / a047);
  a103 = (a060 * a103);
  a102 = (a102 - a103);
  a103 = (a002 * a102);
  a055 = (a055 + a103);
  a055 = (a032 * a055);
  a055 = (a030 * a055);
  a103 = (a055 / a004);
  a105 = (a063 * a018);
  a103 = (a103 - a105);
  a105 = (a015 * a103);
  a074 = (a074 + a105);
  a105 = (a012 * a101);
  a106 = (a010 * a104);
  a105 = (a105 + a106);
  a106 = (a000 * a102);
  a105 = (a105 + a106);
  a074 = (a074 - a105);
  a074 = (a027 * a074);
  a074 = (a025 * a074);
  a074 = (a074 / a009);
  a105 = (a015 * a074);
  a043 = (a043 + a105);
  a043 = (a022 * a043);
  a043 = (a019 * a043);
  a105 = (a043 / a014);
  a106 = (a069 * a078);
  a105 = (a105 - a106);
  a106 = (a015 * a105);
  a096 = (a096 + a106);
  a096 = (-a096);
  a096 = (a017 ? a096 : 0);
  a096 = (a096 - a074);
  a106 = (a000 * a096);
  a106 = (a106 - a102);
  a107 = (a009 * a105);
  a107 = (a017 ? a107 : 0);
  a107 = (a103 + a107);
  a108 = (a002 * a107);
  a106 = (a106 + a108);
  a108 = (a046 * a040);
  a102 = (a031 * a102);
  a108 = (a108 + a102);
  a102 = (a001 * a107);
  a108 = (a108 + a102);
  a100 = (a100 / a014);
  a078 = (a076 * a078);
  a100 = (a100 - a078);
  a100 = (a067 * a100);
  a043 = (a008 * a043);
  a100 = (a100 + a043);
  a043 = (a009 * a100);
  a043 = (-a043);
  a043 = (a017 ? a043 : 0);
  a087 = (a087 / a004);
  a018 = (a039 * a018);
  a087 = (a087 - a018);
  a087 = (a061 * a087);
  a055 = (a029 * a055);
  a087 = (a087 + a055);
  a043 = (a043 - a087);
  a087 = (a075 * a043);
  a108 = (a108 + a087);
  a094 = (a062 * a094);
  a103 = (a028 * a103);
  a094 = (a094 + a103);
  a042 = (a065 * a042);
  a042 = (a017 ? a042 : 0);
  a074 = (a023 * a074);
  a042 = (a042 + a074);
  a094 = (a094 + a042);
  a105 = (a006 * a105);
  a105 = (-a105);
  a105 = (a017 ? a105 : 0);
  a094 = (a094 + a105);
  a105 = (a010 + a010);
  a105 = (a054 * a105);
  a100 = (a066 * a100);
  a105 = (a105 + a100);
  a105 = (a017 ? a105 : 0);
  a094 = (a094 + a105);
  a105 = (a000 * a094);
  a108 = (a108 + a105);
  a106 = (a106 + a108);
  a106 = (-a106);
  if (res[0] != 0) res[0][4] = a106;
  a105 = (a068 * a012);
  a100 = (a065 * a012);
  a042 = (a062 * a012);
  a074 = (a028 * a012);
  a103 = (a023 * a012);
  a087 = (a009 * a013);
  a055 = (a006 * a012);
  a087 = (a087 - a055);
  a087 = (a087 / a014);
  a055 = (a009 * a041);
  a018 = (a038 * a012);
  a055 = (a055 - a018);
  a018 = (a037 * a055);
  a087 = (a087 - a018);
  a018 = (a020 * a087);
  a018 = (a036 * a018);
  a078 = (a015 * a018);
  a078 = (a017 ? a078 : 0);
  a103 = (a103 + a078);
  a103 = (a103 / a009);
  a103 = (a026 * a103);
  a103 = (a035 * a103);
  a078 = (a015 * a103);
  a074 = (a074 + a078);
  a074 = (a074 + a013);
  a074 = (a074 / a004);
  a016 = (a016 * a041);
  a074 = (a074 - a016);
  a016 = (a034 * a074);
  a016 = (a033 * a016);
  a078 = (a007 * a016);
  a078 = (a031 + a078);
  a102 = (a012 * a103);
  a078 = (a078 - a102);
  a102 = (a078 / a047);
  a109 = (a002 * a016);
  a110 = (a000 * a103);
  a109 = (a109 - a110);
  a110 = (a053 * a109);
  a111 = (a005 * a016);
  a112 = (a010 * a103);
  a111 = (a111 - a112);
  a112 = (a056 * a111);
  a110 = (a110 + a112);
  a078 = (a049 * a078);
  a110 = (a110 + a078);
  a110 = (a110 / a045);
  a078 = (a052 * a110);
  a102 = (a102 - a078);
  a078 = (a007 * a102);
  a078 = (a051 + a078);
  a111 = (a111 / a047);
  a112 = (a059 * a110);
  a111 = (a111 - a112);
  a112 = (a005 * a111);
  a078 = (a078 + a112);
  a109 = (a109 / a047);
  a110 = (a060 * a110);
  a109 = (a109 - a110);
  a110 = (a002 * a109);
  a078 = (a078 + a110);
  a078 = (a032 * a078);
  a078 = (a030 * a078);
  a110 = (a078 / a004);
  a063 = (a063 * a041);
  a110 = (a110 - a063);
  a063 = (a015 * a110);
  a042 = (a042 + a063);
  a063 = (a012 * a102);
  a112 = (a010 * a111);
  a063 = (a063 + a112);
  a112 = (a000 * a109);
  a063 = (a063 + a112);
  a042 = (a042 - a063);
  a042 = (a027 * a042);
  a042 = (a025 * a042);
  a042 = (a042 / a009);
  a063 = (a015 * a042);
  a100 = (a100 + a063);
  a100 = (a022 * a100);
  a100 = (a019 * a100);
  a063 = (a100 / a014);
  a112 = (a069 * a055);
  a063 = (a063 - a112);
  a112 = (a015 * a063);
  a105 = (a105 + a112);
  a105 = (-a105);
  a105 = (a017 ? a105 : 0);
  a105 = (a105 - a042);
  a112 = (a000 * a105);
  a112 = (a112 - a109);
  a113 = (a009 * a063);
  a113 = (a017 ? a113 : 0);
  a113 = (a110 + a113);
  a114 = (a002 * a113);
  a112 = (a112 + a114);
  a114 = (a046 * a016);
  a109 = (a031 * a109);
  a114 = (a114 + a109);
  a109 = (a001 * a113);
  a114 = (a114 + a109);
  a087 = (a087 / a014);
  a055 = (a076 * a055);
  a087 = (a087 - a055);
  a087 = (a067 * a087);
  a100 = (a008 * a100);
  a087 = (a087 + a100);
  a100 = (a009 * a087);
  a100 = (-a100);
  a100 = (a017 ? a100 : 0);
  a074 = (a074 / a004);
  a039 = (a039 * a041);
  a074 = (a074 - a039);
  a074 = (a061 * a074);
  a078 = (a029 * a078);
  a074 = (a074 + a078);
  a100 = (a100 - a074);
  a074 = (a075 * a100);
  a114 = (a114 + a074);
  a103 = (a062 * a103);
  a110 = (a028 * a110);
  a103 = (a103 + a110);
  a018 = (a065 * a018);
  a018 = (a017 ? a018 : 0);
  a042 = (a023 * a042);
  a018 = (a018 + a042);
  a103 = (a103 + a018);
  a063 = (a006 * a063);
  a063 = (-a063);
  a063 = (a017 ? a063 : 0);
  a103 = (a103 + a063);
  a063 = (a012 + a012);
  a063 = (a054 * a063);
  a087 = (a066 * a087);
  a063 = (a063 + a087);
  a063 = (a017 ? a063 : 0);
  a103 = (a103 + a063);
  a063 = (a000 * a103);
  a114 = (a114 + a063);
  a112 = (a112 + a114);
  a112 = (-a112);
  if (res[0] != 0) res[0][5] = a112;
  a063 = (a009 * a002);
  a087 = (a000 + a000);
  a018 = (a003 * a087);
  a063 = (a063 - a018);
  a018 = (a000 - a001);
  a042 = (a015 * a018);
  a110 = (a006 * a002);
  a042 = (a042 - a110);
  a063 = (a063 - a042);
  a063 = (a063 / a014);
  a042 = (a038 * a002);
  a110 = (a004 * a087);
  a042 = (a042 - a110);
  a110 = (a037 * a042);
  a063 = (a063 - a110);
  a110 = (a020 * a063);
  a110 = (a036 * a110);
  a074 = (a015 * a110);
  a074 = (a017 ? a074 : 0);
  a078 = (a023 * a002);
  a074 = (a074 - a078);
  a074 = (a074 - a018);
  a074 = (a074 / a009);
  a078 = (a024 / a009);
  a039 = (a078 * a087);
  a074 = (a074 + a039);
  a039 = (a026 * a074);
  a039 = (a035 * a039);
  a041 = (a015 * a039);
  a055 = (a028 * a002);
  a041 = (a041 - a055);
  a041 = (a041 + a002);
  a041 = (a041 / a004);
  a055 = (a034 * a041);
  a055 = (a033 * a055);
  a109 = (a007 * a055);
  a115 = (a012 * a039);
  a109 = (a109 - a115);
  a115 = (a109 / a047);
  a116 = (a002 * a055);
  a117 = (a000 * a039);
  a117 = (a117 - a028);
  a116 = (a116 - a117);
  a117 = -1.;
  a116 = (a116 + a117);
  a118 = (a053 * a116);
  a119 = (a005 * a055);
  a120 = (a010 * a039);
  a119 = (a119 - a120);
  a120 = (a056 * a119);
  a118 = (a118 + a120);
  a109 = (a049 * a109);
  a118 = (a118 + a109);
  a118 = (a118 / a045);
  a109 = (a052 * a118);
  a115 = (a115 - a109);
  a109 = (a007 * a115);
  a119 = (a119 / a047);
  a120 = (a059 * a118);
  a119 = (a119 - a120);
  a120 = (a005 * a119);
  a109 = (a109 + a120);
  a116 = (a116 / a047);
  a118 = (a060 * a118);
  a116 = (a116 - a118);
  a118 = (a002 * a116);
  a109 = (a109 + a118);
  a109 = (a032 * a109);
  a109 = (a030 * a109);
  a118 = (a109 / a004);
  a120 = (a015 * a118);
  a121 = (a062 * a002);
  a120 = (a120 - a121);
  a121 = (a012 * a115);
  a122 = (a010 * a119);
  a121 = (a121 + a122);
  a122 = (a000 * a116);
  a122 = (a122 - a046);
  a121 = (a121 + a122);
  a120 = (a120 - a121);
  a120 = (a027 * a120);
  a120 = (a025 * a120);
  a121 = (a120 / a009);
  a122 = (a065 / a009);
  a123 = (a122 * a087);
  a121 = (a121 + a123);
  a123 = (a015 * a121);
  a124 = (a065 * a002);
  a123 = (a123 - a124);
  a123 = (a022 * a123);
  a123 = (a019 * a123);
  a124 = (a123 / a014);
  a125 = (a069 * a042);
  a124 = (a124 - a125);
  a125 = (a015 * a124);
  a126 = (a068 * a002);
  a125 = (a125 - a126);
  a125 = (-a125);
  a125 = (a017 ? a125 : 0);
  a125 = (a125 - a121);
  a126 = (a000 * a125);
  a127 = (a015 * a068);
  a127 = (-a127);
  a127 = (a017 ? a127 : 0);
  a127 = (a127 - a065);
  a126 = (a126 - a127);
  a126 = (a126 - a116);
  a128 = (a009 * a124);
  a129 = (a068 * a087);
  a128 = (a128 - a129);
  a128 = (a017 ? a128 : 0);
  a128 = (a118 + a128);
  a129 = (a002 * a128);
  a126 = (a126 + a129);
  a129 = (a046 * a055);
  a130 = (a031 * a116);
  a129 = (a129 + a130);
  a130 = (a001 * a128);
  a130 = (a073 + a130);
  a129 = (a129 + a130);
  a063 = (a063 / a014);
  a042 = (a076 * a042);
  a063 = (a063 - a042);
  a063 = (a067 * a063);
  a123 = (a008 * a123);
  a063 = (a063 + a123);
  a123 = (a009 * a063);
  a042 = (a054 * a087);
  a123 = (a123 - a042);
  a123 = (-a123);
  a123 = (a017 ? a123 : 0);
  a041 = (a041 / a004);
  a041 = (a061 * a041);
  a109 = (a029 * a109);
  a041 = (a041 + a109);
  a123 = (a123 - a041);
  a041 = (a075 * a123);
  a129 = (a129 + a041);
  a041 = (a062 * a039);
  a118 = (a028 * a118);
  a041 = (a041 + a118);
  a110 = (a065 * a110);
  a110 = (a017 ? a110 : 0);
  a121 = (a023 * a121);
  a110 = (a110 + a121);
  a041 = (a041 + a110);
  a018 = (a068 * a018);
  a110 = (a006 * a124);
  a018 = (a018 + a110);
  a018 = (-a018);
  a018 = (a017 ? a018 : 0);
  a041 = (a041 + a018);
  a018 = (a066 * a063);
  a110 = (a002 + a002);
  a110 = (a054 * a110);
  a018 = (a018 - a110);
  a018 = (a017 ? a018 : 0);
  a041 = (a041 + a018);
  a018 = (a000 * a041);
  a110 = (a028 * a062);
  a121 = (a023 * a065);
  a110 = (a110 + a121);
  a121 = (a006 * a068);
  a121 = (-a121);
  a121 = (a017 ? a121 : 0);
  a110 = (a110 + a121);
  a121 = (a066 * a054);
  a121 = (a017 ? a121 : 0);
  a110 = (a110 + a121);
  a018 = (a018 - a110);
  a129 = (a129 + a018);
  a018 = (a126 + a129);
  a018 = (-a018);
  if (res[0] != 0) res[0][6] = a018;
  a121 = (a009 * a005);
  a118 = (a010 + a010);
  a109 = (a003 * a118);
  a121 = (a121 - a109);
  a109 = (a010 - a011);
  a042 = (a015 * a109);
  a130 = (a006 * a005);
  a042 = (a042 - a130);
  a121 = (a121 - a042);
  a121 = (a121 / a014);
  a042 = (a038 * a005);
  a130 = (a004 * a118);
  a042 = (a042 - a130);
  a130 = (a037 * a042);
  a121 = (a121 - a130);
  a130 = (a020 * a121);
  a130 = (a036 * a130);
  a131 = (a015 * a130);
  a131 = (a017 ? a131 : 0);
  a132 = (a023 * a005);
  a131 = (a131 - a132);
  a131 = (a131 - a109);
  a131 = (a131 / a009);
  a132 = (a078 * a118);
  a131 = (a131 + a132);
  a132 = (a026 * a131);
  a132 = (a035 * a132);
  a133 = (a015 * a132);
  a134 = (a028 * a005);
  a133 = (a133 - a134);
  a133 = (a133 + a005);
  a133 = (a133 / a004);
  a134 = (a034 * a133);
  a134 = (a033 * a134);
  a135 = (a007 * a134);
  a136 = (a012 * a132);
  a135 = (a135 - a136);
  a136 = (a135 / a047);
  a137 = (a002 * a134);
  a138 = (a000 * a132);
  a137 = (a137 - a138);
  a138 = (a053 * a137);
  a139 = (a005 * a134);
  a140 = (a010 * a132);
  a140 = (a140 - a028);
  a139 = (a139 - a140);
  a139 = (a139 + a117);
  a140 = (a056 * a139);
  a138 = (a138 + a140);
  a135 = (a049 * a135);
  a138 = (a138 + a135);
  a138 = (a138 / a045);
  a135 = (a052 * a138);
  a136 = (a136 - a135);
  a135 = (a007 * a136);
  a139 = (a139 / a047);
  a140 = (a059 * a138);
  a139 = (a139 - a140);
  a140 = (a005 * a139);
  a135 = (a135 + a140);
  a137 = (a137 / a047);
  a138 = (a060 * a138);
  a137 = (a137 - a138);
  a138 = (a002 * a137);
  a135 = (a135 + a138);
  a135 = (a032 * a135);
  a135 = (a030 * a135);
  a138 = (a135 / a004);
  a140 = (a015 * a138);
  a141 = (a062 * a005);
  a140 = (a140 - a141);
  a141 = (a012 * a136);
  a142 = (a010 * a139);
  a142 = (a142 - a048);
  a141 = (a141 + a142);
  a142 = (a000 * a137);
  a141 = (a141 + a142);
  a140 = (a140 - a141);
  a140 = (a027 * a140);
  a140 = (a025 * a140);
  a141 = (a140 / a009);
  a142 = (a122 * a118);
  a141 = (a141 + a142);
  a142 = (a015 * a141);
  a143 = (a065 * a005);
  a142 = (a142 - a143);
  a142 = (a022 * a142);
  a142 = (a019 * a142);
  a143 = (a142 / a014);
  a144 = (a069 * a042);
  a143 = (a143 - a144);
  a144 = (a015 * a143);
  a145 = (a068 * a005);
  a144 = (a144 - a145);
  a144 = (-a144);
  a144 = (a017 ? a144 : 0);
  a144 = (a144 - a141);
  a145 = (a000 * a144);
  a145 = (a145 - a137);
  a146 = (a009 * a143);
  a147 = (a068 * a118);
  a146 = (a146 - a147);
  a146 = (a017 ? a146 : 0);
  a146 = (a138 + a146);
  a147 = (a002 * a146);
  a145 = (a145 + a147);
  a147 = (a046 * a134);
  a148 = (a031 * a137);
  a147 = (a147 + a148);
  a148 = (a001 * a146);
  a147 = (a147 + a148);
  a121 = (a121 / a014);
  a042 = (a076 * a042);
  a121 = (a121 - a042);
  a121 = (a067 * a121);
  a142 = (a008 * a142);
  a121 = (a121 + a142);
  a142 = (a009 * a121);
  a042 = (a054 * a118);
  a142 = (a142 - a042);
  a142 = (-a142);
  a142 = (a017 ? a142 : 0);
  a133 = (a133 / a004);
  a133 = (a061 * a133);
  a135 = (a029 * a135);
  a133 = (a133 + a135);
  a142 = (a142 - a133);
  a133 = (a075 * a142);
  a147 = (a147 + a133);
  a133 = (a062 * a132);
  a138 = (a028 * a138);
  a133 = (a133 + a138);
  a130 = (a065 * a130);
  a130 = (a017 ? a130 : 0);
  a141 = (a023 * a141);
  a130 = (a130 + a141);
  a133 = (a133 + a130);
  a109 = (a068 * a109);
  a130 = (a006 * a143);
  a109 = (a109 + a130);
  a109 = (-a109);
  a109 = (a017 ? a109 : 0);
  a133 = (a133 + a109);
  a109 = (a066 * a121);
  a130 = (a005 + a005);
  a130 = (a054 * a130);
  a109 = (a109 - a130);
  a109 = (a017 ? a109 : 0);
  a133 = (a133 + a109);
  a109 = (a000 * a133);
  a147 = (a147 + a109);
  a109 = (a145 + a147);
  a109 = (-a109);
  if (res[0] != 0) res[0][7] = a109;
  a130 = (a009 * a007);
  a141 = (a012 + a012);
  a138 = (a003 * a141);
  a130 = (a130 - a138);
  a138 = (a012 - a013);
  a135 = (a015 * a138);
  a042 = (a006 * a007);
  a135 = (a135 - a042);
  a130 = (a130 - a135);
  a130 = (a130 / a014);
  a135 = (a038 * a007);
  a042 = (a004 * a141);
  a135 = (a135 - a042);
  a042 = (a037 * a135);
  a130 = (a130 - a042);
  a042 = (a020 * a130);
  a042 = (a036 * a042);
  a148 = (a015 * a042);
  a148 = (a017 ? a148 : 0);
  a149 = (a023 * a007);
  a148 = (a148 - a149);
  a148 = (a148 - a138);
  a148 = (a148 / a009);
  a149 = (a078 * a141);
  a148 = (a148 + a149);
  a149 = (a026 * a148);
  a149 = (a035 * a149);
  a150 = (a015 * a149);
  a151 = (a028 * a007);
  a150 = (a150 - a151);
  a150 = (a150 + a007);
  a150 = (a150 / a004);
  a151 = (a034 * a150);
  a151 = (a033 * a151);
  a152 = (a007 * a151);
  a153 = (a012 * a149);
  a153 = (a153 - a028);
  a152 = (a152 - a153);
  a152 = (a152 + a117);
  a117 = (a152 / a047);
  a153 = (a002 * a151);
  a154 = (a000 * a149);
  a153 = (a153 - a154);
  a154 = (a053 * a153);
  a155 = (a005 * a151);
  a156 = (a010 * a149);
  a155 = (a155 - a156);
  a156 = (a056 * a155);
  a154 = (a154 + a156);
  a152 = (a049 * a152);
  a154 = (a154 + a152);
  a154 = (a154 / a045);
  a152 = (a052 * a154);
  a117 = (a117 - a152);
  a152 = (a007 * a117);
  a155 = (a155 / a047);
  a156 = (a059 * a154);
  a155 = (a155 - a156);
  a156 = (a005 * a155);
  a152 = (a152 + a156);
  a153 = (a153 / a047);
  a154 = (a060 * a154);
  a153 = (a153 - a154);
  a154 = (a002 * a153);
  a152 = (a152 + a154);
  a152 = (a032 * a152);
  a152 = (a030 * a152);
  a154 = (a152 / a004);
  a156 = (a015 * a154);
  a157 = (a062 * a007);
  a156 = (a156 - a157);
  a157 = (a012 * a117);
  a157 = (a157 - a051);
  a158 = (a010 * a155);
  a157 = (a157 + a158);
  a158 = (a000 * a153);
  a157 = (a157 + a158);
  a156 = (a156 - a157);
  a156 = (a027 * a156);
  a156 = (a025 * a156);
  a157 = (a156 / a009);
  a158 = (a122 * a141);
  a157 = (a157 + a158);
  a158 = (a015 * a157);
  a159 = (a065 * a007);
  a158 = (a158 - a159);
  a158 = (a022 * a158);
  a158 = (a019 * a158);
  a159 = (a158 / a014);
  a160 = (a069 * a135);
  a159 = (a159 - a160);
  a160 = (a015 * a159);
  a161 = (a068 * a007);
  a160 = (a160 - a161);
  a160 = (-a160);
  a160 = (a017 ? a160 : 0);
  a160 = (a160 - a157);
  a161 = (a000 * a160);
  a161 = (a161 - a153);
  a162 = (a009 * a159);
  a163 = (a068 * a141);
  a162 = (a162 - a163);
  a162 = (a017 ? a162 : 0);
  a162 = (a154 + a162);
  a163 = (a002 * a162);
  a161 = (a161 + a163);
  a163 = (a046 * a151);
  a164 = (a031 * a153);
  a163 = (a163 + a164);
  a164 = (a001 * a162);
  a163 = (a163 + a164);
  a130 = (a130 / a014);
  a135 = (a076 * a135);
  a130 = (a130 - a135);
  a130 = (a067 * a130);
  a158 = (a008 * a158);
  a130 = (a130 + a158);
  a158 = (a009 * a130);
  a135 = (a054 * a141);
  a158 = (a158 - a135);
  a158 = (-a158);
  a158 = (a017 ? a158 : 0);
  a150 = (a150 / a004);
  a150 = (a061 * a150);
  a152 = (a029 * a152);
  a150 = (a150 + a152);
  a158 = (a158 - a150);
  a150 = (a075 * a158);
  a163 = (a163 + a150);
  a150 = (a062 * a149);
  a154 = (a028 * a154);
  a150 = (a150 + a154);
  a042 = (a065 * a042);
  a042 = (a017 ? a042 : 0);
  a157 = (a023 * a157);
  a042 = (a042 + a157);
  a150 = (a150 + a042);
  a138 = (a068 * a138);
  a042 = (a006 * a159);
  a138 = (a138 + a042);
  a138 = (-a138);
  a138 = (a017 ? a138 : 0);
  a150 = (a150 + a138);
  a138 = (a066 * a130);
  a042 = (a007 + a007);
  a042 = (a054 * a042);
  a138 = (a138 - a042);
  a138 = (a017 ? a138 : 0);
  a150 = (a150 + a138);
  a138 = (a000 * a150);
  a163 = (a163 + a138);
  a138 = (a161 + a163);
  a138 = (-a138);
  if (res[0] != 0) res[0][8] = a138;
  a042 = (a068 * a002);
  a157 = (a065 * a002);
  a154 = (a062 * a002);
  a152 = (a028 * a002);
  a135 = (a023 * a002);
  a164 = (a003 * a087);
  a165 = (a015 * a001);
  a166 = (a006 * a002);
  a165 = (a165 + a166);
  a164 = (a164 - a165);
  a164 = (a164 / a014);
  a165 = (a004 * a087);
  a166 = (a038 * a002);
  a165 = (a165 - a166);
  a166 = (a037 * a165);
  a164 = (a164 - a166);
  a166 = (a020 * a164);
  a166 = (a036 * a166);
  a167 = (a015 * a166);
  a167 = (a017 ? a167 : 0);
  a135 = (a135 + a167);
  a135 = (a135 - a001);
  a135 = (a135 / a009);
  a167 = (a078 * a087);
  a135 = (a135 - a167);
  a167 = (a026 * a135);
  a167 = (a035 * a167);
  a168 = (a015 * a167);
  a152 = (a152 + a168);
  a152 = (a152 / a004);
  a168 = (a034 * a152);
  a168 = (a033 * a168);
  a169 = (a007 * a168);
  a170 = (a012 * a167);
  a169 = (a169 - a170);
  a170 = (a169 / a047);
  a171 = (a002 * a168);
  a172 = (a000 * a167);
  a172 = (a028 + a172);
  a171 = (a171 - a172);
  a172 = (a053 * a171);
  a173 = (a005 * a168);
  a174 = (a010 * a167);
  a173 = (a173 - a174);
  a174 = (a056 * a173);
  a172 = (a172 + a174);
  a169 = (a049 * a169);
  a172 = (a172 + a169);
  a172 = (a172 / a045);
  a169 = (a052 * a172);
  a170 = (a170 - a169);
  a169 = (a007 * a170);
  a173 = (a173 / a047);
  a174 = (a059 * a172);
  a173 = (a173 - a174);
  a174 = (a005 * a173);
  a169 = (a169 + a174);
  a171 = (a171 / a047);
  a172 = (a060 * a172);
  a171 = (a171 - a172);
  a172 = (a002 * a171);
  a169 = (a169 + a172);
  a169 = (a032 * a169);
  a169 = (a030 * a169);
  a172 = (a169 / a004);
  a174 = (a015 * a172);
  a154 = (a154 + a174);
  a174 = (a012 * a170);
  a175 = (a010 * a173);
  a174 = (a174 + a175);
  a175 = (a000 * a171);
  a175 = (a046 + a175);
  a174 = (a174 + a175);
  a154 = (a154 - a174);
  a154 = (a027 * a154);
  a154 = (a025 * a154);
  a174 = (a154 / a009);
  a175 = (a122 * a087);
  a174 = (a174 - a175);
  a175 = (a015 * a174);
  a157 = (a157 + a175);
  a157 = (a022 * a157);
  a157 = (a019 * a157);
  a175 = (a157 / a014);
  a176 = (a069 * a165);
  a175 = (a175 - a176);
  a176 = (a015 * a175);
  a042 = (a042 + a176);
  a042 = (-a042);
  a042 = (a017 ? a042 : 0);
  a042 = (a042 - a174);
  a176 = (a000 * a042);
  a176 = (a127 + a176);
  a176 = (a176 - a171);
  a177 = (a068 * a087);
  a178 = (a009 * a175);
  a177 = (a177 + a178);
  a177 = (a017 ? a177 : 0);
  a177 = (a172 + a177);
  a178 = (a002 * a177);
  a176 = (a176 + a178);
  a178 = (a046 * a168);
  a179 = (a031 * a171);
  a178 = (a178 + a179);
  a179 = (a001 * a177);
  a178 = (a178 + a179);
  a179 = (a054 * a087);
  a164 = (a164 / a014);
  a165 = (a076 * a165);
  a164 = (a164 - a165);
  a164 = (a067 * a164);
  a157 = (a008 * a157);
  a164 = (a164 + a157);
  a157 = (a009 * a164);
  a179 = (a179 + a157);
  a179 = (-a179);
  a179 = (a017 ? a179 : 0);
  a152 = (a152 / a004);
  a152 = (a061 * a152);
  a169 = (a029 * a169);
  a152 = (a152 + a169);
  a179 = (a179 - a152);
  a152 = (a075 * a179);
  a178 = (a178 + a152);
  a152 = (a062 * a167);
  a172 = (a028 * a172);
  a152 = (a152 + a172);
  a166 = (a065 * a166);
  a166 = (a017 ? a166 : 0);
  a174 = (a023 * a174);
  a166 = (a166 + a174);
  a152 = (a152 + a166);
  a166 = (a068 * a001);
  a174 = (a006 * a175);
  a166 = (a166 + a174);
  a166 = (-a166);
  a166 = (a017 ? a166 : 0);
  a152 = (a152 + a166);
  a166 = (a002 + a002);
  a166 = (a054 * a166);
  a174 = (a066 * a164);
  a166 = (a166 + a174);
  a166 = (a017 ? a166 : 0);
  a152 = (a152 + a166);
  a166 = (a000 * a152);
  a166 = (a110 + a166);
  a178 = (a178 + a166);
  a166 = (a176 + a178);
  a166 = (-a166);
  if (res[0] != 0) res[0][9] = a166;
  a174 = (a068 * a005);
  a172 = (a065 * a005);
  a169 = (a062 * a005);
  a157 = (a028 * a005);
  a165 = (a023 * a005);
  a180 = (a003 * a118);
  a181 = (a015 * a011);
  a182 = (a006 * a005);
  a181 = (a181 + a182);
  a180 = (a180 - a181);
  a180 = (a180 / a014);
  a181 = (a004 * a118);
  a182 = (a038 * a005);
  a181 = (a181 - a182);
  a182 = (a037 * a181);
  a180 = (a180 - a182);
  a182 = (a020 * a180);
  a182 = (a036 * a182);
  a183 = (a015 * a182);
  a183 = (a017 ? a183 : 0);
  a165 = (a165 + a183);
  a165 = (a165 - a011);
  a165 = (a165 / a009);
  a183 = (a078 * a118);
  a165 = (a165 - a183);
  a183 = (a026 * a165);
  a183 = (a035 * a183);
  a184 = (a015 * a183);
  a157 = (a157 + a184);
  a157 = (a157 / a004);
  a184 = (a034 * a157);
  a184 = (a033 * a184);
  a185 = (a007 * a184);
  a186 = (a012 * a183);
  a185 = (a185 - a186);
  a186 = (a185 / a047);
  a187 = (a002 * a184);
  a188 = (a000 * a183);
  a187 = (a187 - a188);
  a188 = (a053 * a187);
  a189 = (a005 * a184);
  a190 = (a010 * a183);
  a190 = (a028 + a190);
  a189 = (a189 - a190);
  a190 = (a056 * a189);
  a188 = (a188 + a190);
  a185 = (a049 * a185);
  a188 = (a188 + a185);
  a188 = (a188 / a045);
  a185 = (a052 * a188);
  a186 = (a186 - a185);
  a185 = (a007 * a186);
  a189 = (a189 / a047);
  a190 = (a059 * a188);
  a189 = (a189 - a190);
  a190 = (a005 * a189);
  a185 = (a185 + a190);
  a187 = (a187 / a047);
  a188 = (a060 * a188);
  a187 = (a187 - a188);
  a188 = (a002 * a187);
  a185 = (a185 + a188);
  a185 = (a032 * a185);
  a185 = (a030 * a185);
  a188 = (a185 / a004);
  a190 = (a015 * a188);
  a169 = (a169 + a190);
  a190 = (a012 * a186);
  a191 = (a010 * a189);
  a191 = (a048 + a191);
  a190 = (a190 + a191);
  a191 = (a000 * a187);
  a190 = (a190 + a191);
  a169 = (a169 - a190);
  a169 = (a027 * a169);
  a169 = (a025 * a169);
  a190 = (a169 / a009);
  a191 = (a122 * a118);
  a190 = (a190 - a191);
  a191 = (a015 * a190);
  a172 = (a172 + a191);
  a172 = (a022 * a172);
  a172 = (a019 * a172);
  a191 = (a172 / a014);
  a192 = (a069 * a181);
  a191 = (a191 - a192);
  a192 = (a015 * a191);
  a174 = (a174 + a192);
  a174 = (-a174);
  a174 = (a017 ? a174 : 0);
  a174 = (a174 - a190);
  a192 = (a000 * a174);
  a192 = (a192 - a187);
  a193 = (a068 * a118);
  a194 = (a009 * a191);
  a193 = (a193 + a194);
  a193 = (a017 ? a193 : 0);
  a193 = (a188 + a193);
  a194 = (a002 * a193);
  a192 = (a192 + a194);
  a194 = (a046 * a184);
  a195 = (a031 * a187);
  a194 = (a194 + a195);
  a195 = (a001 * a193);
  a194 = (a194 + a195);
  a195 = (a054 * a118);
  a180 = (a180 / a014);
  a181 = (a076 * a181);
  a180 = (a180 - a181);
  a180 = (a067 * a180);
  a172 = (a008 * a172);
  a180 = (a180 + a172);
  a172 = (a009 * a180);
  a195 = (a195 + a172);
  a195 = (-a195);
  a195 = (a017 ? a195 : 0);
  a157 = (a157 / a004);
  a157 = (a061 * a157);
  a185 = (a029 * a185);
  a157 = (a157 + a185);
  a195 = (a195 - a157);
  a157 = (a075 * a195);
  a194 = (a194 + a157);
  a157 = (a062 * a183);
  a188 = (a028 * a188);
  a157 = (a157 + a188);
  a182 = (a065 * a182);
  a182 = (a017 ? a182 : 0);
  a190 = (a023 * a190);
  a182 = (a182 + a190);
  a157 = (a157 + a182);
  a182 = (a068 * a011);
  a190 = (a006 * a191);
  a182 = (a182 + a190);
  a182 = (-a182);
  a182 = (a017 ? a182 : 0);
  a157 = (a157 + a182);
  a182 = (a005 + a005);
  a182 = (a054 * a182);
  a190 = (a066 * a180);
  a182 = (a182 + a190);
  a182 = (a017 ? a182 : 0);
  a157 = (a157 + a182);
  a182 = (a000 * a157);
  a194 = (a194 + a182);
  a182 = (a192 + a194);
  a182 = (-a182);
  if (res[0] != 0) res[0][10] = a182;
  a190 = (a068 * a007);
  a188 = (a065 * a007);
  a185 = (a062 * a007);
  a172 = (a028 * a007);
  a181 = (a023 * a007);
  a196 = (a003 * a141);
  a197 = (a015 * a013);
  a198 = (a006 * a007);
  a197 = (a197 + a198);
  a196 = (a196 - a197);
  a196 = (a196 / a014);
  a197 = (a004 * a141);
  a038 = (a038 * a007);
  a197 = (a197 - a038);
  a037 = (a037 * a197);
  a196 = (a196 - a037);
  a020 = (a020 * a196);
  a036 = (a036 * a020);
  a020 = (a015 * a036);
  a020 = (a017 ? a020 : 0);
  a181 = (a181 + a020);
  a181 = (a181 - a013);
  a181 = (a181 / a009);
  a078 = (a078 * a141);
  a181 = (a181 - a078);
  a026 = (a026 * a181);
  a035 = (a035 * a026);
  a026 = (a015 * a035);
  a172 = (a172 + a026);
  a172 = (a172 / a004);
  a034 = (a034 * a172);
  a033 = (a033 * a034);
  a034 = (a007 * a033);
  a026 = (a012 * a035);
  a026 = (a028 + a026);
  a034 = (a034 - a026);
  a026 = (a034 / a047);
  a078 = (a002 * a033);
  a020 = (a000 * a035);
  a078 = (a078 - a020);
  a053 = (a053 * a078);
  a020 = (a005 * a033);
  a037 = (a010 * a035);
  a020 = (a020 - a037);
  a056 = (a056 * a020);
  a053 = (a053 + a056);
  a049 = (a049 * a034);
  a053 = (a053 + a049);
  a053 = (a053 / a045);
  a052 = (a052 * a053);
  a026 = (a026 - a052);
  a052 = (a007 * a026);
  a020 = (a020 / a047);
  a059 = (a059 * a053);
  a020 = (a020 - a059);
  a059 = (a005 * a020);
  a052 = (a052 + a059);
  a078 = (a078 / a047);
  a060 = (a060 * a053);
  a078 = (a078 - a060);
  a060 = (a002 * a078);
  a052 = (a052 + a060);
  a032 = (a032 * a052);
  a030 = (a030 * a032);
  a032 = (a030 / a004);
  a052 = (a015 * a032);
  a185 = (a185 + a052);
  a052 = (a012 * a026);
  a052 = (a051 + a052);
  a060 = (a010 * a020);
  a052 = (a052 + a060);
  a060 = (a000 * a078);
  a052 = (a052 + a060);
  a185 = (a185 - a052);
  a027 = (a027 * a185);
  a025 = (a025 * a027);
  a027 = (a025 / a009);
  a122 = (a122 * a141);
  a027 = (a027 - a122);
  a122 = (a015 * a027);
  a188 = (a188 + a122);
  a022 = (a022 * a188);
  a019 = (a019 * a022);
  a022 = (a019 / a014);
  a069 = (a069 * a197);
  a022 = (a022 - a069);
  a015 = (a015 * a022);
  a190 = (a190 + a015);
  a190 = (-a190);
  a190 = (a017 ? a190 : 0);
  a190 = (a190 - a027);
  a015 = (a000 * a190);
  a015 = (a015 - a078);
  a069 = (a068 * a141);
  a188 = (a009 * a022);
  a069 = (a069 + a188);
  a069 = (a017 ? a069 : 0);
  a069 = (a032 + a069);
  a188 = (a002 * a069);
  a015 = (a015 + a188);
  a188 = (a046 * a033);
  a122 = (a031 * a078);
  a188 = (a188 + a122);
  a122 = (a001 * a069);
  a188 = (a188 + a122);
  a122 = (a054 * a141);
  a196 = (a196 / a014);
  a076 = (a076 * a197);
  a196 = (a196 - a076);
  a067 = (a067 * a196);
  a008 = (a008 * a019);
  a067 = (a067 + a008);
  a008 = (a009 * a067);
  a122 = (a122 + a008);
  a122 = (-a122);
  a122 = (a017 ? a122 : 0);
  a172 = (a172 / a004);
  a061 = (a061 * a172);
  a029 = (a029 * a030);
  a061 = (a061 + a029);
  a122 = (a122 - a061);
  a075 = (a075 * a122);
  a188 = (a188 + a075);
  a062 = (a062 * a035);
  a032 = (a028 * a032);
  a062 = (a062 + a032);
  a065 = (a065 * a036);
  a065 = (a017 ? a065 : 0);
  a023 = (a023 * a027);
  a065 = (a065 + a023);
  a062 = (a062 + a065);
  a065 = (a068 * a013);
  a006 = (a006 * a022);
  a065 = (a065 + a006);
  a065 = (-a065);
  a065 = (a017 ? a065 : 0);
  a062 = (a062 + a065);
  a065 = (a007 + a007);
  a065 = (a054 * a065);
  a066 = (a066 * a067);
  a065 = (a065 + a066);
  a065 = (a017 ? a065 : 0);
  a062 = (a062 + a065);
  a065 = (a000 * a062);
  a188 = (a188 + a065);
  a065 = (a015 + a188);
  a065 = (-a065);
  if (res[0] != 0) res[0][11] = a065;
  if (res[0] != 0) res[0][12] = a081;
  a080 = (a010 * a080);
  a080 = (a080 - a077);
  a081 = (a005 * a082);
  a081 = (a081 - a073);
  a080 = (a080 + a081);
  a044 = (a048 * a044);
  a077 = (a031 * a077);
  a044 = (a044 + a077);
  a082 = (a011 * a082);
  a082 = (a082 - a073);
  a044 = (a044 + a082);
  a082 = (a071 * a072);
  a077 = (a005 + a005);
  a050 = (a077 * a050);
  a082 = (a082 + a050);
  a044 = (a044 + a082);
  a064 = (a010 * a064);
  a044 = (a044 + a064);
  a080 = (a080 + a044);
  a080 = (-a080);
  if (res[0] != 0) res[0][13] = a080;
  a080 = (a010 * a088);
  a080 = (a080 - a084);
  a044 = (a005 * a090);
  a080 = (a080 + a044);
  a044 = (a048 * a070);
  a084 = (a031 * a084);
  a044 = (a044 + a084);
  a084 = (a011 * a090);
  a044 = (a044 + a084);
  a084 = (a077 * a086);
  a044 = (a044 + a084);
  a084 = (a010 * a058);
  a044 = (a044 + a084);
  a080 = (a080 + a044);
  a080 = (-a080);
  if (res[0] != 0) res[0][14] = a080;
  a044 = (a010 * a091);
  a044 = (a044 - a095);
  a084 = (a005 * a098);
  a044 = (a044 + a084);
  a084 = (a048 * a079);
  a095 = (a031 * a095);
  a084 = (a084 + a095);
  a095 = (a011 * a098);
  a084 = (a084 + a095);
  a095 = (a077 * a083);
  a084 = (a084 + a095);
  a095 = (a010 * a085);
  a084 = (a084 + a095);
  a044 = (a044 + a084);
  a044 = (-a044);
  if (res[0] != 0) res[0][15] = a044;
  a084 = (a010 * a096);
  a084 = (a084 - a104);
  a095 = (a005 * a107);
  a095 = (a073 + a095);
  a084 = (a084 + a095);
  a095 = (a048 * a040);
  a104 = (a031 * a104);
  a095 = (a095 + a104);
  a104 = (a011 * a107);
  a095 = (a095 + a104);
  a104 = (a093 * a072);
  a064 = (a077 * a043);
  a104 = (a104 + a064);
  a095 = (a095 + a104);
  a104 = (a010 * a094);
  a095 = (a095 + a104);
  a084 = (a084 + a095);
  a084 = (-a084);
  if (res[0] != 0) res[0][16] = a084;
  a104 = (a010 * a105);
  a104 = (a104 - a111);
  a064 = (a005 * a113);
  a104 = (a104 + a064);
  a064 = (a048 * a016);
  a111 = (a031 * a111);
  a064 = (a064 + a111);
  a111 = (a011 * a113);
  a064 = (a064 + a111);
  a111 = (a077 * a100);
  a064 = (a064 + a111);
  a111 = (a010 * a103);
  a064 = (a064 + a111);
  a104 = (a104 + a064);
  a104 = (-a104);
  if (res[0] != 0) res[0][17] = a104;
  a111 = (a010 * a125);
  a111 = (a111 - a119);
  a082 = (a005 * a128);
  a111 = (a111 + a082);
  a082 = (a048 * a055);
  a119 = (a031 * a119);
  a082 = (a082 + a119);
  a119 = (a011 * a128);
  a082 = (a082 + a119);
  a119 = (a077 * a123);
  a082 = (a082 + a119);
  a119 = (a010 * a041);
  a082 = (a082 + a119);
  a111 = (a111 + a082);
  a111 = (-a111);
  if (res[0] != 0) res[0][18] = a111;
  a119 = (a010 * a144);
  a119 = (a119 - a127);
  a119 = (a119 - a139);
  a050 = (a005 * a146);
  a119 = (a119 + a050);
  a050 = (a048 * a134);
  a081 = (a031 * a139);
  a050 = (a050 + a081);
  a081 = (a011 * a146);
  a081 = (a073 + a081);
  a050 = (a050 + a081);
  a081 = (a077 * a142);
  a050 = (a050 + a081);
  a081 = (a010 * a133);
  a081 = (a081 - a110);
  a050 = (a050 + a081);
  a081 = (a119 + a050);
  a081 = (-a081);
  if (res[0] != 0) res[0][19] = a081;
  a066 = (a010 * a160);
  a066 = (a066 - a155);
  a006 = (a005 * a162);
  a066 = (a066 + a006);
  a006 = (a048 * a151);
  a023 = (a031 * a155);
  a006 = (a006 + a023);
  a023 = (a011 * a162);
  a006 = (a006 + a023);
  a023 = (a077 * a158);
  a006 = (a006 + a023);
  a023 = (a010 * a150);
  a006 = (a006 + a023);
  a023 = (a066 + a006);
  a023 = (-a023);
  if (res[0] != 0) res[0][20] = a023;
  a027 = (a010 * a042);
  a027 = (a027 - a173);
  a036 = (a005 * a177);
  a027 = (a027 + a036);
  a036 = (a048 * a168);
  a032 = (a031 * a173);
  a036 = (a036 + a032);
  a032 = (a011 * a177);
  a036 = (a036 + a032);
  a032 = (a077 * a179);
  a036 = (a036 + a032);
  a032 = (a010 * a152);
  a036 = (a036 + a032);
  a032 = (a027 + a036);
  a032 = (-a032);
  if (res[0] != 0) res[0][21] = a032;
  a075 = (a010 * a174);
  a075 = (a127 + a075);
  a075 = (a075 - a189);
  a061 = (a005 * a193);
  a075 = (a075 + a061);
  a061 = (a048 * a184);
  a029 = (a031 * a189);
  a061 = (a061 + a029);
  a029 = (a011 * a193);
  a061 = (a061 + a029);
  a029 = (a077 * a195);
  a061 = (a061 + a029);
  a029 = (a010 * a157);
  a029 = (a110 + a029);
  a061 = (a061 + a029);
  a029 = (a075 + a061);
  a029 = (-a029);
  if (res[0] != 0) res[0][22] = a029;
  a030 = (a010 * a190);
  a030 = (a030 - a020);
  a172 = (a005 * a069);
  a030 = (a030 + a172);
  a172 = (a048 * a033);
  a008 = (a031 * a020);
  a172 = (a172 + a008);
  a008 = (a011 * a069);
  a172 = (a172 + a008);
  a077 = (a077 * a122);
  a172 = (a172 + a077);
  a077 = (a010 * a062);
  a172 = (a172 + a077);
  a077 = (a030 + a172);
  a077 = (-a077);
  if (res[0] != 0) res[0][23] = a077;
  if (res[0] != 0) res[0][24] = a089;
  if (res[0] != 0) res[0][25] = a080;
  a088 = (a012 * a088);
  a088 = (a088 - a021);
  a080 = (a007 * a090);
  a080 = (a080 - a073);
  a088 = (a088 + a080);
  a070 = (a051 * a070);
  a021 = (a031 * a021);
  a070 = (a070 + a021);
  a090 = (a013 * a090);
  a090 = (a090 - a073);
  a070 = (a070 + a090);
  a090 = (a071 * a072);
  a021 = (a007 + a007);
  a086 = (a021 * a086);
  a090 = (a090 + a086);
  a070 = (a070 + a090);
  a058 = (a012 * a058);
  a070 = (a070 + a058);
  a088 = (a088 + a070);
  a088 = (-a088);
  if (res[0] != 0) res[0][26] = a088;
  a091 = (a012 * a091);
  a091 = (a091 - a092);
  a088 = (a007 * a098);
  a091 = (a091 + a088);
  a079 = (a051 * a079);
  a092 = (a031 * a092);
  a079 = (a079 + a092);
  a098 = (a013 * a098);
  a079 = (a079 + a098);
  a083 = (a021 * a083);
  a079 = (a079 + a083);
  a085 = (a012 * a085);
  a079 = (a079 + a085);
  a091 = (a091 + a079);
  a091 = (-a091);
  if (res[0] != 0) res[0][27] = a091;
  a096 = (a012 * a096);
  a096 = (a096 - a101);
  a079 = (a007 * a107);
  a096 = (a096 + a079);
  a040 = (a051 * a040);
  a101 = (a031 * a101);
  a040 = (a040 + a101);
  a107 = (a013 * a107);
  a040 = (a040 + a107);
  a043 = (a021 * a043);
  a040 = (a040 + a043);
  a094 = (a012 * a094);
  a040 = (a040 + a094);
  a096 = (a096 + a040);
  a096 = (-a096);
  if (res[0] != 0) res[0][28] = a096;
  a105 = (a012 * a105);
  a105 = (a105 - a102);
  a040 = (a007 * a113);
  a040 = (a073 + a040);
  a105 = (a105 + a040);
  a016 = (a051 * a016);
  a102 = (a031 * a102);
  a016 = (a016 + a102);
  a113 = (a013 * a113);
  a016 = (a016 + a113);
  a072 = (a093 * a072);
  a100 = (a021 * a100);
  a072 = (a072 + a100);
  a016 = (a016 + a072);
  a103 = (a012 * a103);
  a016 = (a016 + a103);
  a105 = (a105 + a016);
  a105 = (-a105);
  if (res[0] != 0) res[0][29] = a105;
  a103 = (a012 * a125);
  a103 = (a103 - a115);
  a072 = (a007 * a128);
  a103 = (a103 + a072);
  a055 = (a051 * a055);
  a115 = (a031 * a115);
  a055 = (a055 + a115);
  a128 = (a013 * a128);
  a055 = (a055 + a128);
  a123 = (a021 * a123);
  a055 = (a055 + a123);
  a123 = (a012 * a041);
  a055 = (a055 + a123);
  a103 = (a103 + a055);
  a103 = (-a103);
  if (res[0] != 0) res[0][30] = a103;
  a123 = (a012 * a144);
  a123 = (a123 - a136);
  a128 = (a007 * a146);
  a123 = (a123 + a128);
  a134 = (a051 * a134);
  a136 = (a031 * a136);
  a134 = (a134 + a136);
  a146 = (a013 * a146);
  a134 = (a134 + a146);
  a142 = (a021 * a142);
  a134 = (a134 + a142);
  a142 = (a012 * a133);
  a134 = (a134 + a142);
  a123 = (a123 + a134);
  a123 = (-a123);
  if (res[0] != 0) res[0][31] = a123;
  a142 = (a012 * a160);
  a142 = (a142 - a127);
  a142 = (a142 - a117);
  a146 = (a007 * a162);
  a142 = (a142 + a146);
  a151 = (a051 * a151);
  a146 = (a031 * a117);
  a151 = (a151 + a146);
  a162 = (a013 * a162);
  a073 = (a073 + a162);
  a151 = (a151 + a073);
  a158 = (a021 * a158);
  a151 = (a151 + a158);
  a158 = (a012 * a150);
  a158 = (a158 - a110);
  a151 = (a151 + a158);
  a158 = (a142 + a151);
  a158 = (-a158);
  if (res[0] != 0) res[0][32] = a158;
  a073 = (a012 * a042);
  a073 = (a073 - a170);
  a162 = (a007 * a177);
  a073 = (a073 + a162);
  a168 = (a051 * a168);
  a162 = (a031 * a170);
  a168 = (a168 + a162);
  a177 = (a013 * a177);
  a168 = (a168 + a177);
  a179 = (a021 * a179);
  a168 = (a168 + a179);
  a179 = (a012 * a152);
  a168 = (a168 + a179);
  a179 = (a073 + a168);
  a179 = (-a179);
  if (res[0] != 0) res[0][33] = a179;
  a177 = (a012 * a174);
  a177 = (a177 - a186);
  a162 = (a007 * a193);
  a177 = (a177 + a162);
  a184 = (a051 * a184);
  a162 = (a031 * a186);
  a184 = (a184 + a162);
  a193 = (a013 * a193);
  a184 = (a184 + a193);
  a195 = (a021 * a195);
  a184 = (a184 + a195);
  a195 = (a012 * a157);
  a184 = (a184 + a195);
  a195 = (a177 + a184);
  a195 = (-a195);
  if (res[0] != 0) res[0][34] = a195;
  a193 = (a012 * a190);
  a193 = (a127 + a193);
  a193 = (a193 - a026);
  a162 = (a007 * a069);
  a193 = (a193 + a162);
  a033 = (a051 * a033);
  a031 = (a031 * a026);
  a033 = (a033 + a031);
  a069 = (a013 * a069);
  a033 = (a033 + a069);
  a021 = (a021 * a122);
  a033 = (a033 + a021);
  a021 = (a012 * a062);
  a110 = (a110 + a021);
  a033 = (a033 + a110);
  a110 = (a193 + a033);
  a110 = (-a110);
  if (res[0] != 0) res[0][35] = a110;
  if (res[0] != 0) res[0][36] = a097;
  if (res[0] != 0) res[0][37] = a044;
  if (res[0] != 0) res[0][38] = a091;
  if (res[0] != 0) res[0][39] = a099;
  if (res[0] != 0) res[0][40] = a108;
  if (res[0] != 0) res[0][41] = a114;
  if (res[0] != 0) res[0][42] = a129;
  if (res[0] != 0) res[0][43] = a147;
  if (res[0] != 0) res[0][44] = a163;
  if (res[0] != 0) res[0][45] = a178;
  if (res[0] != 0) res[0][46] = a194;
  if (res[0] != 0) res[0][47] = a188;
  if (res[0] != 0) res[0][48] = a106;
  if (res[0] != 0) res[0][49] = a084;
  if (res[0] != 0) res[0][50] = a096;
  if (res[0] != 0) res[0][51] = a108;
  if (res[0] != 0) res[0][52] = a095;
  if (res[0] != 0) res[0][53] = a064;
  if (res[0] != 0) res[0][54] = a082;
  if (res[0] != 0) res[0][55] = a050;
  if (res[0] != 0) res[0][56] = a006;
  if (res[0] != 0) res[0][57] = a036;
  if (res[0] != 0) res[0][58] = a061;
  if (res[0] != 0) res[0][59] = a172;
  if (res[0] != 0) res[0][60] = a112;
  if (res[0] != 0) res[0][61] = a104;
  if (res[0] != 0) res[0][62] = a105;
  if (res[0] != 0) res[0][63] = a114;
  if (res[0] != 0) res[0][64] = a064;
  if (res[0] != 0) res[0][65] = a016;
  if (res[0] != 0) res[0][66] = a055;
  if (res[0] != 0) res[0][67] = a134;
  if (res[0] != 0) res[0][68] = a151;
  if (res[0] != 0) res[0][69] = a168;
  if (res[0] != 0) res[0][70] = a184;
  if (res[0] != 0) res[0][71] = a033;
  if (res[0] != 0) res[0][72] = a018;
  if (res[0] != 0) res[0][73] = a111;
  if (res[0] != 0) res[0][74] = a103;
  if (res[0] != 0) res[0][75] = a129;
  if (res[0] != 0) res[0][76] = a082;
  if (res[0] != 0) res[0][77] = a055;
  a125 = (a001 * a125);
  a125 = (a127 + a125);
  a039 = (a046 * a039);
  a116 = (a028 * a116);
  a039 = (a039 + a116);
  a125 = (a125 - a039);
  a039 = (a003 * a068);
  a039 = (a017 ? a039 : 0);
  a024 = (a024 / a009);
  a116 = (a024 * a057);
  a039 = (a039 - a116);
  a054 = (a004 * a054);
  a054 = (-a054);
  a054 = (a017 ? a054 : 0);
  a039 = (a039 + a054);
  a054 = (a071 * a039);
  a000 = (a000 + a000);
  a116 = (a068 * a002);
  a124 = (a003 * a124);
  a116 = (a116 + a124);
  a116 = (a017 ? a116 : 0);
  a074 = (a074 / a009);
  a124 = (a024 / a009);
  a055 = (a124 * a087);
  a074 = (a074 + a055);
  a074 = (a057 * a074);
  a120 = (a024 * a120);
  a074 = (a074 + a120);
  a116 = (a116 - a074);
  a063 = (a004 * a063);
  a063 = (-a063);
  a063 = (a017 ? a063 : 0);
  a116 = (a116 + a063);
  a116 = (a000 * a116);
  a054 = (a054 + a116);
  a125 = (a125 + a054);
  a041 = (a002 * a041);
  a125 = (a125 + a041);
  a126 = (a126 - a125);
  if (res[0] != 0) res[0][78] = a126;
  a126 = (a001 * a144);
  a125 = (a046 * a132);
  a137 = (a028 * a137);
  a125 = (a125 + a137);
  a126 = (a126 - a125);
  a125 = (a068 * a005);
  a143 = (a003 * a143);
  a125 = (a125 + a143);
  a125 = (a017 ? a125 : 0);
  a131 = (a131 / a009);
  a143 = (a124 * a118);
  a131 = (a131 + a143);
  a131 = (a057 * a131);
  a140 = (a024 * a140);
  a131 = (a131 + a140);
  a125 = (a125 - a131);
  a121 = (a004 * a121);
  a121 = (-a121);
  a121 = (a017 ? a121 : 0);
  a125 = (a125 + a121);
  a121 = (a000 * a125);
  a126 = (a126 + a121);
  a121 = (a002 * a133);
  a126 = (a126 + a121);
  a145 = (a145 - a126);
  if (res[0] != 0) res[0][79] = a145;
  a126 = (a001 * a160);
  a121 = (a046 * a149);
  a153 = (a028 * a153);
  a121 = (a121 + a153);
  a126 = (a126 - a121);
  a068 = (a068 * a007);
  a159 = (a003 * a159);
  a068 = (a068 + a159);
  a068 = (a017 ? a068 : 0);
  a148 = (a148 / a009);
  a159 = (a124 * a141);
  a148 = (a148 + a159);
  a148 = (a057 * a148);
  a156 = (a024 * a156);
  a148 = (a148 + a156);
  a068 = (a068 - a148);
  a130 = (a004 * a130);
  a130 = (-a130);
  a130 = (a017 ? a130 : 0);
  a068 = (a068 + a130);
  a130 = (a000 * a068);
  a126 = (a126 + a130);
  a130 = (a002 * a150);
  a126 = (a126 + a130);
  a161 = (a161 - a126);
  if (res[0] != 0) res[0][80] = a161;
  a126 = (a001 * a042);
  a130 = (a046 * a167);
  a171 = (a028 * a171);
  a130 = (a130 + a171);
  a126 = (a126 - a130);
  a130 = (a093 * a039);
  a175 = (a003 * a175);
  a175 = (a017 ? a175 : 0);
  a135 = (a135 / a009);
  a087 = (a124 * a087);
  a135 = (a135 - a087);
  a135 = (a057 * a135);
  a154 = (a024 * a154);
  a135 = (a135 + a154);
  a175 = (a175 - a135);
  a164 = (a004 * a164);
  a164 = (-a164);
  a164 = (a017 ? a164 : 0);
  a175 = (a175 + a164);
  a164 = (a000 * a175);
  a130 = (a130 + a164);
  a126 = (a126 + a130);
  a130 = (a002 * a152);
  a126 = (a126 + a130);
  a176 = (a176 - a126);
  if (res[0] != 0) res[0][81] = a176;
  a130 = (a001 * a174);
  a164 = (a046 * a183);
  a187 = (a028 * a187);
  a164 = (a164 + a187);
  a130 = (a130 - a164);
  a191 = (a003 * a191);
  a191 = (a017 ? a191 : 0);
  a165 = (a165 / a009);
  a118 = (a124 * a118);
  a165 = (a165 - a118);
  a165 = (a057 * a165);
  a169 = (a024 * a169);
  a165 = (a165 + a169);
  a191 = (a191 - a165);
  a180 = (a004 * a180);
  a180 = (-a180);
  a180 = (a017 ? a180 : 0);
  a191 = (a191 + a180);
  a180 = (a000 * a191);
  a130 = (a130 + a180);
  a180 = (a002 * a157);
  a130 = (a130 + a180);
  a192 = (a192 - a130);
  if (res[0] != 0) res[0][82] = a192;
  a001 = (a001 * a190);
  a046 = (a046 * a035);
  a078 = (a028 * a078);
  a046 = (a046 + a078);
  a001 = (a001 - a046);
  a003 = (a003 * a022);
  a003 = (a017 ? a003 : 0);
  a181 = (a181 / a009);
  a124 = (a124 * a141);
  a181 = (a181 - a124);
  a057 = (a057 * a181);
  a024 = (a024 * a025);
  a057 = (a057 + a024);
  a003 = (a003 - a057);
  a004 = (a004 * a067);
  a004 = (-a004);
  a017 = (a017 ? a004 : 0);
  a003 = (a003 + a017);
  a000 = (a000 * a003);
  a001 = (a001 + a000);
  a002 = (a002 * a062);
  a001 = (a001 + a002);
  a015 = (a015 - a001);
  if (res[0] != 0) res[0][83] = a015;
  if (res[0] != 0) res[0][84] = a109;
  if (res[0] != 0) res[0][85] = a081;
  if (res[0] != 0) res[0][86] = a123;
  if (res[0] != 0) res[0][87] = a147;
  if (res[0] != 0) res[0][88] = a050;
  if (res[0] != 0) res[0][89] = a134;
  if (res[0] != 0) res[0][90] = a145;
  a144 = (a011 * a144);
  a144 = (a127 + a144);
  a132 = (a048 * a132);
  a139 = (a028 * a139);
  a132 = (a132 + a139);
  a144 = (a144 - a132);
  a132 = (a071 * a039);
  a010 = (a010 + a010);
  a125 = (a010 * a125);
  a132 = (a132 + a125);
  a144 = (a144 + a132);
  a133 = (a005 * a133);
  a144 = (a144 + a133);
  a119 = (a119 - a144);
  if (res[0] != 0) res[0][91] = a119;
  a119 = (a011 * a160);
  a144 = (a048 * a149);
  a155 = (a028 * a155);
  a144 = (a144 + a155);
  a119 = (a119 - a144);
  a144 = (a010 * a068);
  a119 = (a119 + a144);
  a144 = (a005 * a150);
  a119 = (a119 + a144);
  a066 = (a066 - a119);
  if (res[0] != 0) res[0][92] = a066;
  a119 = (a011 * a042);
  a144 = (a048 * a167);
  a173 = (a028 * a173);
  a144 = (a144 + a173);
  a119 = (a119 - a144);
  a144 = (a010 * a175);
  a119 = (a119 + a144);
  a144 = (a005 * a152);
  a119 = (a119 + a144);
  a027 = (a027 - a119);
  if (res[0] != 0) res[0][93] = a027;
  a119 = (a011 * a174);
  a144 = (a048 * a183);
  a189 = (a028 * a189);
  a144 = (a144 + a189);
  a119 = (a119 - a144);
  a144 = (a093 * a039);
  a189 = (a010 * a191);
  a144 = (a144 + a189);
  a119 = (a119 + a144);
  a144 = (a005 * a157);
  a119 = (a119 + a144);
  a075 = (a075 - a119);
  if (res[0] != 0) res[0][94] = a075;
  a011 = (a011 * a190);
  a048 = (a048 * a035);
  a020 = (a028 * a020);
  a048 = (a048 + a020);
  a011 = (a011 - a048);
  a010 = (a010 * a003);
  a011 = (a011 + a010);
  a005 = (a005 * a062);
  a011 = (a011 + a005);
  a030 = (a030 - a011);
  if (res[0] != 0) res[0][95] = a030;
  if (res[0] != 0) res[0][96] = a138;
  if (res[0] != 0) res[0][97] = a023;
  if (res[0] != 0) res[0][98] = a158;
  if (res[0] != 0) res[0][99] = a163;
  if (res[0] != 0) res[0][100] = a006;
  if (res[0] != 0) res[0][101] = a151;
  if (res[0] != 0) res[0][102] = a161;
  if (res[0] != 0) res[0][103] = a066;
  a160 = (a013 * a160);
  a127 = (a127 + a160);
  a149 = (a051 * a149);
  a117 = (a028 * a117);
  a149 = (a149 + a117);
  a127 = (a127 - a149);
  a071 = (a071 * a039);
  a012 = (a012 + a012);
  a068 = (a012 * a068);
  a071 = (a071 + a068);
  a127 = (a127 + a071);
  a150 = (a007 * a150);
  a127 = (a127 + a150);
  a142 = (a142 - a127);
  if (res[0] != 0) res[0][104] = a142;
  a042 = (a013 * a042);
  a167 = (a051 * a167);
  a170 = (a028 * a170);
  a167 = (a167 + a170);
  a042 = (a042 - a167);
  a175 = (a012 * a175);
  a042 = (a042 + a175);
  a152 = (a007 * a152);
  a042 = (a042 + a152);
  a073 = (a073 - a042);
  if (res[0] != 0) res[0][105] = a073;
  a174 = (a013 * a174);
  a183 = (a051 * a183);
  a186 = (a028 * a186);
  a183 = (a183 + a186);
  a174 = (a174 - a183);
  a191 = (a012 * a191);
  a174 = (a174 + a191);
  a157 = (a007 * a157);
  a174 = (a174 + a157);
  a177 = (a177 - a174);
  if (res[0] != 0) res[0][106] = a177;
  a013 = (a013 * a190);
  a051 = (a051 * a035);
  a028 = (a028 * a026);
  a051 = (a051 + a028);
  a013 = (a013 - a051);
  a093 = (a093 * a039);
  a012 = (a012 * a003);
  a093 = (a093 + a012);
  a013 = (a013 + a093);
  a007 = (a007 * a062);
  a013 = (a013 + a007);
  a193 = (a193 - a013);
  if (res[0] != 0) res[0][107] = a193;
  if (res[0] != 0) res[0][108] = a166;
  if (res[0] != 0) res[0][109] = a032;
  if (res[0] != 0) res[0][110] = a179;
  if (res[0] != 0) res[0][111] = a178;
  if (res[0] != 0) res[0][112] = a036;
  if (res[0] != 0) res[0][113] = a168;
  if (res[0] != 0) res[0][114] = a176;
  if (res[0] != 0) res[0][115] = a027;
  if (res[0] != 0) res[0][116] = a073;
  if (res[0] != 0) res[0][117] = a126;
  if (res[0] != 0) res[0][118] = a130;
  if (res[0] != 0) res[0][119] = a001;
  if (res[0] != 0) res[0][120] = a182;
  if (res[0] != 0) res[0][121] = a029;
  if (res[0] != 0) res[0][122] = a195;
  if (res[0] != 0) res[0][123] = a194;
  if (res[0] != 0) res[0][124] = a061;
  if (res[0] != 0) res[0][125] = a184;
  if (res[0] != 0) res[0][126] = a192;
  if (res[0] != 0) res[0][127] = a075;
  if (res[0] != 0) res[0][128] = a177;
  if (res[0] != 0) res[0][129] = a130;
  if (res[0] != 0) res[0][130] = a119;
  if (res[0] != 0) res[0][131] = a011;
  if (res[0] != 0) res[0][132] = a065;
  if (res[0] != 0) res[0][133] = a077;
  if (res[0] != 0) res[0][134] = a110;
  if (res[0] != 0) res[0][135] = a188;
  if (res[0] != 0) res[0][136] = a172;
  if (res[0] != 0) res[0][137] = a033;
  if (res[0] != 0) res[0][138] = a015;
  if (res[0] != 0) res[0][139] = a030;
  if (res[0] != 0) res[0][140] = a193;
  if (res[0] != 0) res[0][141] = a001;
  if (res[0] != 0) res[0][142] = a011;
  if (res[0] != 0) res[0][143] = a013;
}  // NOLINT(readability/fn_size)

}  // namespace

}  // namespace internal
}  // namespace der
}  // namespace multibody
}  // namespace drake
